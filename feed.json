{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "工具",
  "home_page_url": "https://www.dearxue.com/web_html_tool/",
  "feed_url": "https://www.dearxue.com/web_html_tool/feed.json",
  "description": "Maven & Gralde 编译工具, 工欲善其事必先利其器",
  "items": [
    {
      "title": "Gradle 初体验",
      "url": "https://www.dearxue.com/web_html_tool/gradle/002_Gradle_guide_sample.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/002_Gradle_guide_sample.html",
      "content_html": "<h2 id=\"最简单的例子\" tabindex=\"-1\"> 最简单的例子</h2>\n<h3 id=\"初始化脚本\" tabindex=\"-1\"> 初始化脚本</h3>\n<div><pre><code><span>></span>gradle init\n\nSelect <span>type</span> of project to generate:\n  <span>1</span>: basic\n  <span>2</span>: application\n  <span>3</span>: library\n  <span>4</span>: Gradle plugin\nEnter selection <span>(</span>default: basic<span>)</span> <span>[</span><span>1</span><span>..</span><span>4</span><span>]</span> <span>1</span>\n\nSelect build script DSL:\n  <span>1</span>: Groovy\n  <span>2</span>: Kotlin\nEnter selection <span>(</span>default: Groovy<span>)</span> <span>[</span><span>1</span><span>..</span><span>2</span><span>]</span> <span>1</span>\n\nGenerate build using new APIs and behavior <span>(</span>some features may change <span>in</span> the next minor release<span>)</span>? <span>(</span>default: no<span>)</span> <span>[</span>yes, no<span>]</span>\n\nProject name <span>(</span>default: 001_gradle_example<span>)</span>:\n\n\n<span>></span> Task :init\nGet <span>more</span> <span>help</span> with your project: Learn <span>more</span> about Gradle by exploring our samples at https://docs.gradle.org/7.4.2/samples\n\nBUILD SUCCESSFUL <span>in</span> 1m 26s\n<span>2</span> actionable tasks: <span>2</span> executed\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>目录结构如下：</p>\n<div><pre><code><span>\\</span>---001_gradle_example\n    <span>|</span>   .gitattributes\n    <span>|</span>   .gitignore\n    <span>|</span>   build.gradle // 重要, 构建脚本文件，主要的构建配置都在这里写\n    <span>|</span>   gradlew // gradle wrapper 执行脚本文件，用来在没有安装 gradle 的情况下执行 gradle 命令。当然，第一次执行时会下载 gradle。\n    <span>|</span>   gradlew.bat // gradle wrapper 执行脚本文件的 windows 版\n    <span>|</span>   settings.gradle // 项目配置，指明根项目名字和引入的 module\n    <span>|</span>\n    +---.gradle\n    <span>\\</span>---gradle // 重要, 描述了 gradlew 使用的 gradle 版本\n        <span>\\</span>---wrapper\n                gradle-wrapper.jar\n                gradle-wrapper.properties\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"hello-world\" tabindex=\"-1\"> Hello world</h3>\n<p>修改 <code>build.gradle</code> 添加如下：</p>\n<div><pre><code>task hello <span>{</span>\n    doLast <span>{</span>\n        println <span>'Hello world!'</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>运行： <code>gradle -q hello --info</code>, 带不带 <code>-q</code> 或者</p>\n<div><pre><code>\n Task :hello\nCaching disabled <span>for</span> task <span>':hello'</span> because:\n  Build cache is disabled\nTask <span>':hello'</span> is not up-to-date because:\n  Task has not declared any outputs despite executing actions.\nHello world<span>!</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>检查下， 默认gradle 带的 <code>gradle tasks</code> ：</p>\n<div><pre><code>\n------------------------------------------------------------\nTasks runnable from root project <span>'001_gradle_example'</span>\n------------------------------------------------------------\n\nBuild Setup tasks\n-----------------\ninit - Initializes a new Gradle build.\nwrapper - Generates Gradle wrapper files.\n\nHelp tasks\n----------\nbuildEnvironment - Displays all buildscript dependencies declared <span>in</span> root project <span>'001_gradle_example'</span><span>.</span>\ndependencies - Displays all dependencies declared <span>in</span> root project <span>'001_gradle_example'</span><span>.</span>\ndependencyInsight - Displays the insight into a specific dependency <span>in</span> root project <span>'001_gradle_example'</span><span>.</span>\n<span>help</span> - Displays a <span>help</span> message.\njavaToolchains - Displays the detected java toolchains.\noutgoingVariants - Displays the outgoing variants of root project <span>'001_gradle_example'</span><span>.</span>\nprojects - Displays the sub-projects of root project <span>'001_gradle_example'</span><span>.</span>\nproperties - Displays the properties of root project <span>'001_gradle_example'</span><span>.</span>\ntasks - Displays the tasks runnable from root project <span>'001_gradle_example'</span><span>.</span>\n\nTo see all tasks and <span>more</span> detail, run gradle tasks --all\n\nTo see <span>more</span> detail about a task, run gradle <span>help</span> --task <span>&lt;</span>task<span>></span>\n\nBUILD SUCCESSFUL <span>in</span> 1s\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"来点面向对象\" tabindex=\"-1\"> 来点面向对象</h3>\n<div><pre><code>\ntask myTask <span>{</span>\n    ext<span>.</span>myProperty <span>=</span> <span><span>\"dearxue is better\"</span></span>\n<span>}</span>\n\ntask printTaskProperties  <span>{</span>\n    println myTask<span>.</span>myProperty\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后执行 <code>gradle printTaskProperties</code> :</p>\n<div><pre><code>gradle printTaskProperties\n\n<span>></span> Configure project <span>:</span>\ndearxue is better\n\nBUILD SUCCESSFUL <span>in</span> 974ms\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"ds\" tabindex=\"-1\"> DS</h3>\n<p>到此我们可以理解的 Gradle 尚未和我们组织和编译我们的java工程没有任何的关系， 可以看到Gradle 就是在grovvy/koltin 的一个封装， 带了很多上下文也就是有自己一套DSL规范。</p>\n<p>上下文： <a href=\"https://docs.gradle.org/current/dsl/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">DSL 基本概念</a> 参考，<a href=\"https://docs.gradle.org/current/userguide/build_lifecycle.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle Basic</a> 在基础技术上又提升的一层， 大部分情况我们需要了了解DSL 本身， 或者整个Build 全流程， 我们只需要知道 java/spring 的 gradle 插件，但是了解 DSL + 基本理论基础非常有帮助理解为什么那么玩。</p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ol>\n<li><a href=\"https://docs.gradle.org/current/samples/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Sample</a></li>\n<li><a href=\"https://gradle.org/guides/\" target=\"_blank\" rel=\"noopener noreferrer\">Guide</a></li>\n<li><a href=\"https://docs.gradle.org/current/dsl/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">DSL</a></li>\n</ol>\n",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Gradle DSL+ 基本概念",
      "url": "https://www.dearxue.com/web_html_tool/gradle/003_Grade_deep.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/003_Grade_deep.html",
      "content_html": "<p><a href=\"https://docs.gradle.org/current/dsl/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">DSL 基本概念</a>  + <a href=\"https://docs.gradle.org/current/userguide/build_lifecycle.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle 基础</a>  是本文的全部参考。</p>\n<h2 id=\"projects-和-tasks\" tabindex=\"-1\"> Projects 和 tasks</h2>\n<p>projects 和 tasks是 Gradle 中最重要的两个概念。</p>\n<p>任何一个 Gradle 构建都是由一个或多个 projects 组成。每个 project 包括许多可构建组成部分。 这完全取决于你要构建些什么。举个例子，每个 project 或许是一个 jar 包或者一个 web 应用，它也可以是一个由许多其他项目中产生的 jar 构成的 zip 压缩包。一个 project 不必描述它只能进行构建操作。它也可以部署你的应用或搭建你的环境。不要担心它像听上去的那样庞大。 Gradle 的 build-by-convention 可以让您来具体定义一个 project 到底该做什么。</p>\n<p>每个 project 都由多个 tasks 组成。每个 task 都代表了构建执行过程中的一个原子性操作。如编译，打包，生成 javadoc，发布到某个仓库等操作。</p>\n<h2 id=\"phase\" tabindex=\"-1\"> Phase</h2>\n<p>本质 Gradle 用来管理构建流程(task)之间的依赖关系，也就DAG Directed Acyclic Graph；整体上一个build 有下面几个phase。</p>\n<ol>\n<li>Initialization： Gradle 支持单模块、多模块项目，初始化阶段决定项目构建的顺序。</li>\n<li>Configuration: 这个阶段， project 对象被配置， build 脚本被执行。</li>\n<li>Execution: Gradle 决定 tasks 列表, 可以按照传入的参数来决定执行那个命令，或者命令列表。</li>\n</ol>\n<h2 id=\"setting\" tabindex=\"-1\"> Setting</h2>\n<p>参考： <a href=\"TODO\">002_gradle_basic</a> 例子。</p>\n<div><pre><code>\nsettings.gradle\n\nrootProject.name = '002_gradle_basic'\nprintln '001 &gt; This is executed during the initialization phase.'\n\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>\nbuild.gradle\n\nprintln '[configuration - 001 ]  This is executed during the configuration phase.'\n\ntasks.register('configured') {\n    println '[configuration - 002 ]  This is also executed during the configuration phase, because :configured is used in the build.'\n}\n\ntasks.register('test') {\n    doLast {\n        println '[test] This is executed during the execution phase.'\n    }\n}\n\ntasks.register('testBoth') {\n\tdoFirst {\n\t  println '[testBoth] FIRST This is executed first during the execution phase.'\n\t}\n\tdoLast {\n\t  println '[testBoth] LAST This is executed last during the execution phase.'\n\t}\n\tprintln '[testBoth] This is executed during the configuration phase as well, because :testBoth is used in the build.'\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>测试下  <code>gradle test</code></p>\n<div><pre><code><span>></span>gradle <span>test</span>\n<span>[</span>settings<span>]</span> <span>></span> This is executed during the initialization phase.\n\n<span>></span> Configure project <span>:</span>\n<span>[</span>build 001 <span>]</span>  This is executed during the configuration phase.\n\n<span>></span> Task :test\n<span>[</span>test<span>]</span> This is executed during the execution phase.\n\nBUILD SUCCESSFUL <span>in</span> 1s\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"initialization\" tabindex=\"-1\"> Initialization</h2>\n<p><code>settings --&gt; project --&gt; task</code> 是整个过程顺序。</p>\n<p>Gradle looks for a <code>settings.gradle</code> file in the following way:</p>\n<ol>\n<li>It looks for settings.gradle in parent directories.</li>\n<li>If not found, the build is executed as a single project build.</li>\n<li>If a settings.gradle file is found, Gradle checks if the current project is part of the multi-project hierarchy defined in the found settings.gradle file. If not, the build is executed as a single project build. Otherwise a multi-project build is executed.</li>\n</ol>\n<h2 id=\"build-生命周期\" tabindex=\"-1\"> Build 生命周期</h2>\n<p>Hook 到不同的生命周期</p>\n<ol>\n<li>Project evaluation</li>\n<li>Task creation</li>\n<li>Task execution graph ready</li>\n<li>Task execution</li>\n</ol>\n",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Grade 和 Maven 对比",
      "url": "https://www.dearxue.com/web_html_tool/gradle/004_Maven_vs_Gradle.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/004_Maven_vs_Gradle.html",
      "content_html": "<h2 id=\"官方-pk\" tabindex=\"-1\"> 官方 PK</h2>\n<p><a href=\"https://gradle.org/maven-vs-gradle/\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle vs Maven Comparison</a> 从不同角度：</p>\n<ol>\n<li>灵活性</li>\n<li>性能</li>\n<li>用户体验</li>\n<li>依赖管理</li>\n</ol>\n<p>等几个方面来比较 Gradle 和 Maven 之间的区别。</p>\n<p><img src=\"https://gradle.org/images/gradle-vs-maven.gif\" alt=\"gradle vs maven\" loading=\"lazy\"></p>\n<p>此图展示的是 <a href=\"https://github.com/gradle/performance-comparisons/tree/commons-lang\" target=\"_blank\" rel=\"noopener noreferrer\">Apache Commons Lang</a> 使用 Maven 和 Gradle (未开启构建缓存). 详细报告：<a href=\"https://scans.gradle.com/s/of466wbcmynxm?_ga=2.239373571.1628439076.1655342890-1203664022.1654656510\" target=\"_blank\" rel=\"noopener noreferrer\">build here</a>。</p>\n<h2 id=\"灵活性\" tabindex=\"-1\"> 灵活性</h2>\n<p>自然不用说， maven 操作入口是 xml, 而gradle 有grovvy/koltin DSL 加持，当然特别灵活。</p>\n<h2 id=\"性能\" tabindex=\"-1\"> 性能</h2>\n<ol>\n<li><a href=\"https://blog.gradle.org/introducing-incremental-build-support\" target=\"_blank\" rel=\"noopener noreferrer\">Incrementality</a> — Gradle avoids work by tracking input and output of tasks and only running what is necessary, and only processing files that changed when possible，渐进的，不是全量跑。</li>\n<li><a href=\"https://blog.gradle.org/introducing-gradle-build-cache\" target=\"_blank\" rel=\"noopener noreferrer\">Build Cache</a> — Reuses the build outputs of any other Gradle build with the same inputs, including between machines，充分利用缓存。</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/gradle_daemon.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle Daemon</a> — A long-lived process that keeps build information &quot;hot&quot; in memory，后台进程默默地帮你渐进的构建。</li>\n</ol>\n<h2 id=\"用户体验\" tabindex=\"-1\"> 用户体验</h2>\n<p>除IDE 支持， 还有<a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Build Scan™</a> <code>gradle build --scan</code>, 详细报告例子：<a href=\"https://scans.gradle.com/s/of466wbcmynxm?_ga=2.239373571.1628439076.1655342890-1203664022.1654656510\" target=\"_blank\" rel=\"noopener noreferrer\"> build here</a>。</p>\n<p>建议在自己项目中实验一下， 然后可以看到详细的报告。</p>\n<h2 id=\"依赖管理\" tabindex=\"-1\"> 依赖管理</h2>\n<p>Maven Gradle 都是用来管理依赖， 配置依赖仓库， 都可以从远程或者本地缓存并行搜索依赖包。</p>\n<p>Maven允许重写一个依赖项，但只能根据版本重写。Gradle提供了可定制的依赖选择和替换规则，这些规则只需声明一次，就可以在项目范围内处理不需要的依赖。 这个替换原则让 gradle 可以将多源项目一起编译。</p>\n<p>Maven has few, built-in dependency scopes, which forces awkward module architectures in common scenarios like using test fixtures or code generation. There is no separation between unit and integration tests, for example. Gradle allows custom dependency scopes, which provides better-modeled and faster builds.</p>\n<p>Maven dependency conflict resolution works with a shortest path, which is impacted by declaration ordering. Gradle does full conflict resolution, selecting the highest version of a dependency found in the graph. In addition, with Gradle you can declare versions as strictly which allows them to take precedence over transitive versions, allowing to downgrade a dependency.</p>\n<p>As a library producer, Gradle allows producers to declare <code>api</code> and <code>implementation</code> dependencies to prevent unwanted libraries from leaking into the classpaths of consumers. Maven allows publishers to provide metadata through optional dependencies, but as documentation only. Gradle fully supports feature variants and optional dependencies.</p>\n<h2 id=\"对比\" tabindex=\"-1\"> 对比</h2>\n<table>\n<thead>\n<tr>\n<th>Maven</th>\n<th>Gradle</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clean</td>\n<td>clean</td>\n<td>Removes the outputs of tasks</td>\n</tr>\n<tr>\n<td>compile</td>\n<td>classes</td>\n<td>Generates the classes from source files</td>\n</tr>\n<tr>\n<td>test</td>\n<td>test</td>\n<td>Executes unit tests</td>\n</tr>\n<tr>\n<td>package</td>\n<td>assemble</td>\n<td>Creates a jar</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>check</td>\n<td>Runs all tests, integration tests, quality checks</td>\n</tr>\n<tr>\n<td>install</td>\n<td>publishToMavenLocal</td>\n<td>Gradle 需要插件 <code>maven-publish</code> 做这事</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>publishToMavenRepository</td>\n<td>Gradle 需要插件 <code>maven-publish</code> 做这事</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://gradle.org/images/gradle-vs-maven.gif",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Gradle 高级功能篇",
      "url": "https://www.dearxue.com/web_html_tool/gradle/005_Advanced.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/005_Advanced.html",
      "content_html": "<h2 id=\"概要\" tabindex=\"-1\"> 概要</h2>\n<p>作为Java 企业级开发的翘楚， Spring 早在2020 将整个框架编译平台从maven 迁移到gradle: <a href=\"https://spring.io/blog/2020/06/08/migrating-spring-boot-s-build-to-gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Migrating Spring Boot's Build to Gradle</a>, gradle 很多‘高级’功能也得以被 '传播'， 但是由于大部分遗留的项目或者库还是用maven, 导致gradle 其实在'国内'被广泛传播还是不多，一方面gradle 能做所有maven 能做的事情，另外一方面 gradle 以编程的方式来组织你的项目结构和编译、打包等流程， 一旦熟练后， 后面做扩展真的非常方便，而且本身gradle设计的方式也非常值得学习。</p>\n<h2 id=\"verion-catelog\" tabindex=\"-1\"> Verion Catelog</h2>\n<blockquote>\n<p>A version catalog is a list of dependencies, represented as dependency coordinates, that a user can pick from when declaring dependencies in a build script.</p>\n</blockquote>\n<p>很久以前我们是如何控制依赖包的版本：</p>\n<div><pre><code>\ndependencies {\n    implementation(&quot;com.google.guava:guava:30.0-jre&quot;)\n    testImplementation(&quot;org.junit.jupiter:junit-jupiter-api:5.7.1&quot;)\n    testRuntimeOnly(&quot;org.junit.jupiter:junit-jupiter-engine&quot;)\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样写带来的坏处：</p>\n<ol>\n<li>每个项目都要copy</li>\n<li>每次需要手动更新每个  build  文件， 导致各个项目的版本可能不一致</li>\n<li>group, artifact, version  可能搞错</li>\n</ol>\n<p>改进版一， 使用 gradle.properties</p>\n<div><pre><code><span>guavaVersion</span><span>=</span><span>30.0</span>-jre\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>改进二， 放入ext 中</p>\n<div><pre><code>ext <span>{</span>\n   guavaVersion <span>=</span> <span>'30.0-jre'</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>这两种方式都可以这样引用：</p>\n<div><pre><code>\ndependencies {\n    implementation(&quot;com.google.guava:guava:${guavaVersion}&quot;)\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>随着Kotlin DSL的流行, 在 Android 的世界里有一种方式非常流行: 在buildSrc 里用类型安全的  kotlin 语法添加dependencies :</p>\n<div><pre><code>buildSrc/src/main/kotlin/Libs.kt\n\nobject Libs {\n   val guava = &quot;com.google.guava:guava:30.0-jre&quot;\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>然后在 build 文件中可以:</p>\n<div><pre><code>\nbuild.gradle\n\ndependencies {\n    implementation(Libs.guava)\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>最终 <code>version catelog</code> 来了， 首先需要 <code>settings.gradle</code> 里面声明,以启动这个在gradle 7+ 里面启动的功能：</p>\n<div><pre><code>\nenableFeaturePreview(&quot;VERSION_CATALOGS&quot;)\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>然后在你的 <code>settings.gradle</code> 里面声明一个 version catalog, GAV (group, artifact, version) 三套件齐活:</p>\n<div><pre><code>\ndependencyResolutionManagement {\n    versionCatalogs {\n        libs {\n            library('groovy-core', 'org.codehaus.groovy:groovy:3.0.5')\n            library('groovy-json', 'org.codehaus.groovy:groovy-json:3.0.5')\n            library('groovy-nio', 'org.codehaus.groovy:groovy-nio:3.0.5')\n            library('commons-lang3', 'org.apache.commons', 'commons-lang3').version {\n                strictly '[3.8, 4.0['\n                prefer '3.9'\n            }\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如何去引用这些lib 呢在 <code>build.gradle</code> 中如此操作：</p>\n<div><pre><code>dependencies {\n    implementation libs.groovy.core\n    implementation libs.groovy.json\n    implementation libs.groovy.nio\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>当然你也可以从一个 toml 风格文件导入：</p>\n<div><pre><code><span>[</span><span>versions</span><span>]</span>\n<span>common</span> <span>=</span> <span>\"1.4\"</span>\n\n<span>[</span><span>libraries</span><span>]</span>\n\n<span>my-lib</span> <span>=</span> <span>\"com.mycompany:mylib:1.4\"</span>\n<span>my-other-lib</span> <span>=</span> <span>{</span> <span>module</span> <span>=</span> <span>\"com.mycompany:other\"</span><span>,</span> <span>version</span> <span>=</span> <span>\"1.4\"</span> <span>}</span>\n<span>my-other-lib2</span> <span>=</span> <span>{</span> <span>group</span> <span>=</span> <span>\"com.mycompany\"</span><span>,</span> <span>name</span> <span>=</span> <span>\"alternate\"</span><span>,</span> <span>version</span> <span>=</span> <span>\"1.4\"</span> <span>}</span>\n<span>mylib-full-format</span> <span>=</span> <span>{</span> <span>group</span> <span>=</span> <span>\"com.mycompany\"</span><span>,</span> <span>name</span> <span>=</span> <span>\"alternate\"</span><span>,</span> <span>version</span> <span>=</span> <span>{</span> <span>require</span> <span>=</span> <span>\"1.4\"</span> <span>}</span> <span>}</span>\n<span>[</span><span>plugins</span><span>]</span>\n<span>short-notation</span> <span>=</span> <span>\"some.plugin.id:1.4\"</span>\n<span>long-notation</span> <span>=</span> <span>{</span> <span>id</span> <span>=</span> <span>\"some.plugin.id\"</span><span>,</span> <span>version</span> <span>=</span> <span>\"1.4\"</span> <span>}</span>\n<span>reference-notation</span> <span>=</span> <span>{</span> <span>id</span> <span>=</span> <span>\"some.plugin.id\"</span><span>,</span> <span>version.ref</span> <span>=</span> <span>\"common\"</span> <span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>引用：</p>\n<div><pre><code>\ndependencyResolutionManagement {\n    versionCatalogs {\n        libs {\n            from(files(&quot;../gradle/libs.versions.toml&quot;))\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"platform\" tabindex=\"-1\"> Platform</h2>\n<p>在组织内部通过导入一个 <code>toml</code> 文件解决统一配置版本是个不错的选择，但是如果跨组织？比如你希望你的版本是共享的，像开源的spring依赖第三方包， 你要不将文件传到一个公共的地方，或者像maven 做一个 <code>pom</code> 包分享。<code>version-catalog</code> 就是干这个事的：</p>\n<div><pre><code>\nplugins <span>{</span>\n    id <span>'version-catalog'</span>\n    id <span>'maven-publish'</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后定义你的版本依赖：</p>\n<div><pre><code>catalog {\n    // declare the aliases, bundles and versions in this block\n    versionCatalog {\n        library('my-lib', 'com.mycompany:mylib:1.2')\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后使用 <code>maven-publish</code> 或者 <code>ivy-publish</code> 来发布：</p>\n<div><pre><code>publishing {\n    publications {\n        maven(MavenPublication) {\n            from components.versionCatalog\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个命令会生成一个 <code>libs.versions.toml</code> 文件，并上传，然后其他gradle 应用可以拉下来使用。</p>\n<p>“可共享的依赖版本管理” —— 用过 Maven 的小伙伴们可能说，这不就是BOM么。对，这里聊的就是如何使用 gradle 实现 BOM 生成和导入。没用过 Maven 的小伙伴们也不用被劝退，想想在使用 Spring plugin <code>io.spring.dependency-management</code>时，imports.mavenBom到底在做什么，有没有想要了解一下？</p>\n<p>在说 BOM 之前，先了解一下 Maven 的一些基本概念。\nMaven POM，全名 <code>Project Object Model</code>, 是 Maven 使用中的重要配置文件，xml格式，主要用来导入依赖和进行项目构建。\nMaven BOM，全名 <code>Bill Of Materials</code>, 是一种特殊的 POM，主要用来集中管理项目依赖的版本，更加灵活地维护所有依赖的版本信息。\n配置好的 BOM，可以放在单个项目中自用，也可以传阅和分享给其他项目进行公用。如下一个标准的<a href=\"https://start.spring.io/#!type=gradle-project&amp;language=java&amp;platformVersion=2.7.0&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=com.dearxue.example&amp;artifactId=gradle&amp;name=gradle&amp;description=Demo%20project%20for%20Spring%20Boot&amp;packageName=com.dearxue.example.gradle&amp;dependencies=web,cloud-config-client,configuration-processor,testcontainers\" target=\"_blank\" rel=\"noopener noreferrer\">spring boot 项目配置</a>：</p>\n<div><pre><code>plugins <span>{</span>\n\tid <span>'org.springframework.boot'</span> version <span>'2.7.0'</span>\n\tid <span>'io.spring.dependency-management'</span> version <span>'1.0.11.RELEASE'</span>\n\tid <span>'java'</span>\n<span>}</span>\n\ngroup <span>=</span> <span>'com.dearxue.example'</span>\nversion <span>=</span> <span>'0.0.1-SNAPSHOT'</span>\nsourceCompatibility <span>=</span> <span>'11'</span>\n\nconfigurations <span>{</span>\n\tcompileOnly <span>{</span>\n\t\textendsFrom annotationProcessor\n\t<span>}</span>\n<span>}</span>\n\nrepositories <span>{</span>\n\t<span>mavenCentral</span><span>(</span><span>)</span>\n<span>}</span>\n\next <span>{</span>\n\t<span>set</span><span>(</span><span>'springCloudVersion'</span><span>,</span> <span><span>\"2021.0.3\"</span></span><span>)</span>\n\t<span>set</span><span>(</span><span>'testcontainersVersion'</span><span>,</span> <span><span>\"1.17.2\"</span></span><span>)</span>\n<span>}</span>\n\ndependencies <span>{</span>\n\timplementation <span>'org.springframework.boot:spring-boot-starter-web'</span>\n\timplementation <span>'org.springframework.cloud:spring-cloud-starter-config'</span>\n\tannotationProcessor <span>'org.springframework.boot:spring-boot-configuration-processor'</span>\n\ttestImplementation <span>'org.springframework.boot:spring-boot-starter-test'</span>\n\ttestImplementation <span>'org.testcontainers:junit-jupiter'</span>\n<span>}</span>\n\ndependencyManagement <span>{</span>\n\timports <span>{</span>\n\t\tmavenBom <span><span>\"org.testcontainers:testcontainers-bom:</span><span><span>${</span><span>testcontainersVersion</span><span>}</span></span><span>\"</span></span>\n\t\tmavenBom <span><span>\"org.springframework.cloud:spring-cloud-dependencies:</span><span><span>${</span><span>springCloudVersion</span><span>}</span></span><span>\"</span></span>\n\t<span>}</span>\n<span>}</span>\n\ntasks<span>.</span><span>named</span><span>(</span><span>'test'</span><span>)</span> <span>{</span>\n\t<span>useJUnitPlatform</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上面两个插件， 在另外一篇文章中有相信描述，官方文档参考：</p>\n<table>\n<thead>\n<tr>\n<th>pugin</th>\n<th>文档</th>\n<th>源码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.boot</td>\n<td>2.7.0</td>\n<td><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n<tr>\n<td>io.spring.dependency-management</td>\n<td>1.0.11.REALEASE</td>\n<td><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-gradle-plugins/dependency-management-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n</tbody>\n</table>\n<p>可以看到 我们导入 <code>org.springframework.boot:spring-boot-starter-web</code> 时候没有指定版本号， 这个是以为 上面两个插件的配合， boot 定义了 spring boot depedencies BOM 版， depedency management 自动导入。</p>\n<p><a href=\"https://docs.gradle.org/current/userguide/java_platform_plugin.html\" target=\"_blank\" rel=\"noopener noreferrer\">The Java Platform Plugin</a></p>\n<p>Platform 是一个特别的包， 不包含源码，只是用来体现对第三方包的依赖，所以被用来解决项目里依赖的统一管理。</p>\n<p>Platforms 可以以 Gradle Modu。 Metadata 或者 Maven BOMs 进行发行。</p>\n<p><strong>java-platform</strong> 插件不能和 <code>java</code> 或者 <code>java-library</code>公用，也就是理论上一个模块要不是 project 要不是 platform。</p>\n<div><pre><code>\nplugins {\n    id 'java-platform'\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>Maven BOM 和 gradle  <code>Java platform</code> 主要不一样是， Gradle dependencies 扩展了 <code>constraints</code>用以更细粒度的灵活配置, 佐以runtime/api 进行使用。 API 在使用platform 引入的时候在编译时候使用， runtime 运行时， 举例：</p>\n<div><pre><code>\ndependencies {\n    constraints {\n        api 'commons-httpclient:commons-httpclient:3.1'\n        runtime 'org.postgresql:postgresql:42.2.5'\n    }\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里用 <code>constraints</code> 而不是  <code>dependencies</code> ， <code>constraints</code> 只有在依赖被直接或者间接引入的时候才生效， 如上面， 如果项目没有依赖 <code>commons-httpclient</code> 那么不会生效， 如果项目引入了 <code>commons-httpclient</code> 并且是  <code>3.0</code> 版本， 不管是直接还是间接的， 那么会强制使用  <code>3.1</code> 版本而不是 <code>3.0</code>。</p>\n<p>默认防止混淆在platform 里面误操添加 <code>dependency</code> 而不是 <code>constraint</code>, 这样会导致 Gradle 检验错误. 所以如果你想 <code>dependencies</code> 和 <code>constraints</code>, 都可以用， 你可以添加显示的声明:</p>\n<div><pre><code>javaPlatform {\n    allowDependencies()\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>当然, 作为一个服务级的 BOM，自然无需从零开始逐条定义，可以直接先 import 框架级的 BOMs，如上例中的Spring boot / Spring cloud / Spring cloud contract / Junit。\n但由于需要使用第三方platform bom, 则不得不打开配置约束 ——javaPlatform.allowDependencies。</p>\n<p><a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener noreferrer\">spring-framework&gt;framework-bom</a> 参考framework 源码下面， framework-bom 的使用方法。</p>\n<div><pre><code>\nplugins {\n    id 'maven-publish'\n    id 'java-platform'\n}\n\nversion '0.1.1-SNAPSHOT'\n\njavaPlatform {\n    allowDependencies()\n}\ndependencies {\n    api platform('org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE')\n    api platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3')\n    api platform('org.springframework.cloud:spring-cloud-contract-dependencies:2.2.3.RELEASE')\n    api platform('org.junit:junit-bom:5.3.2')\n    constraints {\n        api 'com.google.guava:guava:27.0.1-jre'\n\n        api 'ch.vorburger.mariaDB4j:mariaDB4j-springboot:2.4.0'\n        api 'org.mariadb.jdbc:mariadb-java-client:2.2.5'\n\n        api 'org.mockito:mockito-core:2.22.0'\n        api 'org.mockito:mockito-junit-jupiter:2.22.0'\n        api 'org.assertj:assertj-core:3.11.1'\n    }\n}\n\npublishing {\n    repositories {\n        maven {\n            credentials {\n                username = 'xxxx'\n                password = 'xxxx'\n            }\n\n            def releasesRepoUrl = 'http://xxxxxxx/artifactory/libs-release/'\n            def snapshotsRepoUrl = 'http://xxxxxx/artifactory/libs-snapshot/'\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n        }\n    }\n\n    publications {\n        myPlatform(MavenPublication) {\n            from components.javaPlatform\n        }\n    }\n}\n\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个将会生成一个 BOM 有着 <code>&lt;dependencyManagement&gt;</code> 节点， 然 <code>constraints</code> 里面的版本设定将会转换成  <code>&lt;dependencies&gt;</code>； 在使用的时候， 就如我们使用spring boot 无需未每个jar 制定版本：</p>\n<div><pre><code>\ndependencies {\n    // import a BOM\n    implementation platform('org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE')\n\n    // define dependencies without versions\n    implementation 'com.google.code.gson:gson'\n    implementation 'dom4j:dom4j'\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>catelog 和 platform 都可以用来控制版本 那么到底那个<a href=\"https://docs.gradle.org/current/userguide/platforms.html#sub:platforms-vs-catalog\" target=\"_blank\" rel=\"noopener noreferrer\">更好呢</a>？ 官方解释：</p>\n<ol>\n<li>use catalogs to only define dependencies and their versions for projects and to generate <strong>type-safe</strong> accessors</li>\n<li>use platform to apply versions to dependency graph and to affect dependency resolution</li>\n</ol>\n<p>catalog 比起  platform 更轻量级，  当然在定义你的platform 时候你也可以用类型安全的  catelog:</p>\n<div><pre><code>plugins {\n    id 'java-platform'\n}\n\ndependencies {\n    constraints {\n        api(libs.mylib)\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"tool-chain\" tabindex=\"-1\"> Tool Chain</h2>\n<p>默认情况下, 运行gradle和编译的JVM是一样的。但是这个不能完全满足我们的需求，在一些特殊情况下可能需要不同的JDK 版本进行打包编译。</p>\n<p><code>Java Toolchain</code> (toolchain)是一个工具链, 一般使用安装的不同的不同版本的 JRE/JDK 来 build。 编译使用javac， test and exec 使用 java ；  javadoc 用来生成java 文档,  tool chain 是 <code>Java plugins</code> 自己带。</p>\n<div><pre><code>\nbuild.gradle\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n        vendor = JvmVendorSpec.ADOPTIUM\n    }\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>执行： <code>gradle check</code> 会做这些工作：</p>\n<ol>\n<li>使用toolchain 中定义的JVM 版本来设置  compile、 test 、javadoc 等tasks。</li>\n<li>Gradle 检测本地安装的 JVMs</li>\n<li>Gradle 选择一个toolchain 里面匹配的 JRE/JDK (本例的 JVM 11)</li>\n<li>如果没有, 自动下载匹配的 JDK 版本： <a href=\"https://adoptopenjdk.net/\" target=\"_blank\" rel=\"noopener noreferrer\">AdoptOpenJDK</a></li>\n</ol>\n<div><pre><code>\ngradlew<span>.</span>bat <span>-</span>q javaToolchains\n\n <span>+</span> Options\n     <span>|</span> Auto<span>-</span>detection<span>:</span>     Enabled\n     <span>|</span> Auto<span>-</span>download<span>:</span>      Enabled\n\n <span>+</span> Oracle JDK <span>18.0</span><span>.</span><span>1.1</span><span>+</span><span>2</span><span>-</span><span>6</span>\n     <span>|</span> Location<span>:</span>           C<span>:</span>\\Program Files\\Java\\jdk<span>-</span><span>18.0</span><span>.</span><span>1.1</span>\n     <span>|</span> Language Version<span>:</span>   <span>18</span>\n     <span>|</span> Vendor<span>:</span>             Oracle\n     <span>|</span> Is JDK<span>:</span>             <span>true</span>\n     <span>|</span> Detected by<span>:</span>        Current JVM\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>vendor</code> 可以有不同的选择， IBM, Open JDK....</p>\n<p>单个任务上也可以指定特定的 JDK 版本：</p>\n<div><pre><code>tasks.withType(JavaCompile).configureEach {\n    javaCompiler = javaToolchains.compilerFor {\n        languageVersion = JavaLanguageVersion.of(8)\n    }\n}\ntask('testsOn14', type: Test) {\n    javaLauncher = javaToolchains.launcherFor {\n        languageVersion = JavaLanguageVersion.of(14)\n    }\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ol>\n<li>JavaCompiler 对应 JavaCompile task</li>\n<li>JavaLauncher 对应 JavaExec or Test tasks</li>\n<li>JavadocTool  对应 Javadoc task</li>\n</ol>\n<h2 id=\"build-cache\" tabindex=\"-1\"> Build Cache</h2>\n<p>Gradle build cache 是将编译的结果保存在本地或者远程，用来节省时间, 当然是input 没有被修改情况下。</p>\n<p>两种方式启动：</p>\n<ol>\n<li><code>--build-cache</code> 在启动命令上</li>\n<li><code>org.gradle.caching=true</code> 放在 gradle.properties 里</li>\n</ol>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ol>\n<li><a href=\"https://docs.gradle.org/current/userguide/toolchains.html\" target=\"_blank\" rel=\"noopener noreferrer\">Tool Chain 官方文档</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/blob/main/gradle/toolchains.gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Tool Chain 配置</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/platforms.html\" target=\"_blank\" rel=\"noopener noreferrer\">Sharing dependency versions between projects</a></li>\n<li><a href=\"https://melix.github.io/blog/tags/gradle.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle quickie: laziness</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/java_platform_plugin.html#header\" target=\"_blank\" rel=\"noopener noreferrer\">The Java Platform Plugin</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/build_cache.html\" target=\"_blank\" rel=\"noopener noreferrer\">Build Cache</a></li>\n</ol>\n",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Gradle 在 Spring 中的使用",
      "url": "https://www.dearxue.com/web_html_tool/gradle/009_Spring_gradle.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/009_Spring_gradle.html",
      "content_html": "<p>参考： <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.coordinates\" target=\"_blank\" rel=\"noopener noreferrer\">BOM 版本</a>  + <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.properties\" target=\"_blank\" rel=\"noopener noreferrer\">版本字段</a> 。</p>\n<table>\n<thead>\n<tr>\n<th>pugin</th>\n<th>文档</th>\n<th>源码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.boot</td>\n<td>2.7.0</td>\n<td><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n<tr>\n<td>io.spring.dependency-management</td>\n<td>1.0.11.REALEASE</td>\n<td><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-gradle-plugins/dependency-management-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"init\" tabindex=\"-1\"> init</h2>\n<div><pre><code>\ngradle init\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">org.springframework.boot</a>  主要是各种Job  <code>gradle tasks</code> 里面 boot 开头的job 都是:</p>\n<ol>\n<li>打包成可执行jar、war</li>\n<li>引入以来管理 spring-boot-dependencies 也就是： <code>BOM_COORDINATES</code></li>\n</ol>\n<div><pre><code><span>public</span> <span>static</span> <span>final</span> <span>String</span> BOM_COORDINATES <span>=</span> <span>\"org.springframework.boot:spring-boot-dependencies:\"</span>\n   <span>+</span> SPRING_BOOT_VERSION<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><div><pre><code>gradle tasks\n\nApplication tasks\n-----------------\nbootRun - Runs this project as a Spring Boot application.\n\nBuild tasks\n-----------\nbootBuildImage - Builds an OCI image of the application using the output of the bootJar task\nbootJar - Assembles an executable jar archive containing the main classes and their dependencies.\nbootJarMainClassName - Resolves the name of the application<span>'s main class for the bootJar task.\nbootRunMainClassName - Resolves the name of the application'</span>s main class <span>for</span> the bootRun task.\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">io.spring.dependency-management</a>， 主要是依赖控制： A Gradle plugin that provides Maven-like dependency management and exclusions， 提供和maven 里面 pom 类似操作。</p>\n<p>这两个插件一般是组合使用， dependency-management 依赖 boot 的 pom 版本。</p>\n<div><pre><code>\nplugins {\n  id 'org.springframework.boot' version '2.7.0'\n  id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n  id 'java'\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.coordinates\" target=\"_blank\" rel=\"noopener noreferrer\">BOM 版本</a>  + <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.properties\" target=\"_blank\" rel=\"noopener noreferrer\">版本字段</a> 。   两个plugin 有什么关系？</p>\n<p>当 <code>io.spring.dependency-management</code> 插件被加入的时候, <code>Spring Boot</code> 插件将自动导入 <code>spring-boot-dependencies</code> bom，也就是避免导入starter 时候设置版本号（pom 的本质和好处）。</p>\n<p>相当于自动导入了：</p>\n<div><pre><code>dependencyManagement <span>{</span>\n  imports <span>{</span>\n    mavenBom <span><span>\"org.springframework.boot:spring-boot-dependencies:</span><span><span>${</span><span>SPRING_BOOT_VERSION</span><span>}</span></span><span>\"</span></span>\n  <span>}</span>\n<span>}</span>\n    \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>spring.boot</code> 插件是避免带入版本号， 如果你只想使用 <code>spring.boot</code> 的版本依赖， 但是不想引用 <code>spring.boot</code> 的定制的一些task 比如 boot jar(比如定制spring starter); 有两种方式。</p>\n<h3 id=\"第0种\" tabindex=\"-1\"> 第0种</h3>\n<div><pre><code>plugins <span>{</span>\n  id <span>'org.springframework.boot'</span> version <span>'2.7.0'</span>\n  id <span>'io.spring.dependency-management'</span> version <span>'1.0.11.RELEASE'</span>\n  id <span>'java'</span>\n<span>}</span>\n\n\next <span>{</span>\n  <span>set</span><span>(</span><span>'springCloudVersion'</span><span>,</span> <span><span>\"2021.0.3\"</span></span><span>)</span>\n  <span>set</span><span>(</span><span>'testcontainersVersion'</span><span>,</span> <span><span>\"1.17.2\"</span></span><span>)</span>\n<span>}</span>\n\ndependencies <span>{</span>\n  implementation <span>'org.springframework.boot:spring-boot-starter-web'</span>\n  implementation <span>'org.springframework.cloud:spring-cloud-starter-config'</span>\n  testImplementation <span>'org.springframework.boot:spring-boot-starter-test'</span>\n  testImplementation <span>'org.testcontainers:junit-jupiter'</span>\n<span>}</span>\n\ndependencyManagement <span>{</span>\n  imports <span>{</span>\n    <span>//不需要显式的导入 boot-dependencies </span>\n    mavenBom <span><span>\"org.testcontainers:testcontainers-bom:</span><span><span>${</span><span>testcontainersVersion</span><span>}</span></span><span>\"</span></span>\n    mavenBom <span><span>\"org.springframework.cloud:spring-cloud-dependencies:</span><span><span>${</span><span>springCloudVersion</span><span>}</span></span><span>\"</span></span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"第一种\" tabindex=\"-1\"> 第一种</h3>\n<div><pre><code>plugins {\n\tid 'java'\n\tid(&quot;org.springframework.boot&quot;) version &quot;2.7.0&quot; apply false\n\tid(&quot;io.spring.dependency-management&quot;) version &quot;1.0.11.RELEASE&quot;\n}\n\ndependencyManagement {\n\timports {\n\t\tmavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)\n\t}\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>apply false</code> 表示不带task过来， 那么下面 <code>SpringBootPlugin.BOM_COORDINATES</code> 同样带来 导入 boot bom 效果:</p>\n<div><pre><code>\n<span>public</span> <span>static</span> <span>final</span> <span>String</span> BOM_COORDINATES <span>=</span> <span>\"org.springframework.boot:spring-boot-dependencies:\"</span>\n\t\t\t<span>+</span> SPRING_BOOT_VERSION<span>;</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>默认引入了tasks:</p>\n<div><pre><code>gradle tasks\n\nApplication tasks\n-----------------\nbootRun - Runs this project as a Spring Boot application.\n\nBuild tasks\n-----------\nbootBuildImage - Builds an OCI image of the application using the output of the bootJar task\nbootJar - Assembles an executable jar archive containing the main classes and their dependencies.\nbootJarMainClassName - Resolves the name of the application<span>'s main class for the bootJar task.\nbootRunMainClassName - Resolves the name of the application'</span>s main class <span>for</span> the bootRun task.\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>一旦 <code>apply false</code>， <mark>bootRun 开头的所有任务就没有了！</mark></p>\n<h3 id=\"第二种\" tabindex=\"-1\"> 第二种</h3>\n<p>用 gradle 原生的  <code>platform</code> 功能</p>\n<div><pre><code>plugins <span>{</span>\n\tid <span>'java'</span>\n\t<span>id</span><span>(</span><span><span>\"org.springframework.boot\"</span></span><span>)</span> version <span><span>\"2.7.0\"</span></span> apply <span>false</span>\n<span>}</span>\n\ndependencies <span>{</span>\n\timplementation <span>platform</span><span>(</span>org<span>.</span>springframework<span>.</span>boot<span>.</span>gradle<span>.</span>plugin<span>.</span>SpringBootPlugin<span>.</span>BOM_COORDINATES<span>)</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"两种方式差别\" tabindex=\"-1\"> 两种方式差别</h3>\n<p>用 spring 的 dependency 或者 gradle platform 有什么差别？</p>\n<h4 id=\"spring-depedencies-management-plugin\" tabindex=\"-1\"> Spring Depedencies Management Plugin</h4>\n<p>Spring depedency management 提供了编辑通道:</p>\n<div><pre><code>\next<span>[</span><span>'slf4j.version'</span><span>]</span> <span>=</span> <span>'1.7.20'</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h4 id=\"gradle-platform\" tabindex=\"-1\"> Gradle Platform</h4>\n<p>纯 gradle 方式:</p>\n<div><pre><code>\nconfigurations<span>.</span>all <span>{</span>\n\tresolutionStrategy<span>.</span>eachDependency <span>{</span> DependencyResolveDetails details <span>-></span>\n\t\t<span>if</span> <span>(</span>details<span>.</span>requested<span>.</span>group <span>==</span> <span>'org.slf4j'</span><span>)</span> <span>{</span>\n\t\t\tdetails<span>.</span>useVersion <span>'1.7.20'</span>\n\t\t<span>}</span>\n\t<span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>org.springframework.boot</strong>  和 boot 一致， <strong>io.spring.dependency-management</strong> 一般配合使用， dependency-management 会使用 boot 的版本。</p>\n<h2 id=\"参考项目\" tabindex=\"-1\"> 参考项目</h2>\n<ol>\n<li>统一版本管理 <a href=\"https://docs.gradle.org/current/userguide/platforms.html\" target=\"_blank\" rel=\"noopener noreferrer\">Sharing dependency versions between projects</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/java_platform_plugin.html\" target=\"_blank\" rel=\"noopener noreferrer\">The Java Platform Plugin</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">spring boot  plugin</a></li>\n<li><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">spring depedency management</a></li>\n<li><a href=\"https://github.com/vrudas/spring-framework-examples\" target=\"_blank\" rel=\"noopener noreferrer\">spring framework test</a></li>\n<li><a href=\"https://github.com/will-molloy/java-gradle-template\" target=\"_blank\" rel=\"noopener noreferrer\">java gradle template</a></li>\n</ol>\n",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-28T04:37:33.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Spring 如何组织项目",
      "url": "https://www.dearxue.com/web_html_tool/gradle/010_spring_project_structure.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/010_spring_project_structure.html",
      "content_html": "<p>Spring 早在2020 将整个框架编译平台从maven 迁移到gradle: <a href=\"https://spring.io/blog/2020/06/08/migrating-spring-boot-s-build-to-gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Migrating Spring Boot's Build to Gradle</a>; 来看一看spring 两个关键的项目，是如何组织自己的项目的：</p>\n<ol>\n<li><a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener noreferrer\">spring framework</a> spring framework 源码</li>\n<li><a href=\"https://github.com/spring-projects/spring-boot\" target=\"_blank\" rel=\"noopener noreferrer\">spring boot</a>  spring boot 源码</li>\n<li><a href=\"https://ge.spring.io/scans?search.timeZoneId=Asia/Shanghai\" target=\"_blank\" rel=\"noopener noreferrer\">spring scan</a> 包含所有spring 编译的scan</li>\n</ol>\n<h2 id=\"spring-framework\" tabindex=\"-1\"> Spring Framework</h2>\n<p><a href=\"https://ge.spring.io/scans?search.timeZoneId=Asia/Shanghai\" target=\"_blank\" rel=\"noopener noreferrer\">spring scan</a> 找一个编译成功的项目开始分析。</p>\n<p>项目结构：</p>\n<div><pre><code>buildSrc\nframework-bom\nintegration-tests\nspring-aop\nspring-aspects\nspring-beans\nspring-context\nspring-context-indexer\nspring-context-support\nspring-core\nspring-core-test\nspring-expression\nspring-instrument\nspring-jcl\nspring-jdbc\nspring-jms\nspring-messaging\nspring-orm\nspring-oxm\nspring-r2dbc\nspring-test\nspring-tx\nspring-web\nspring-webflux\nspring-webmvc\nspring-websocket\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"gradle-properties-配置\" tabindex=\"-1\"> <code>gradle.properties</code> 配置</h3>\n<div><pre><code>org.gradle.jvmargs<span>=</span>-Xmx2048m\norg.gradle.caching<span>=</span>true\norg.gradle.parallel<span>=</span>true\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"settings-gradle-配置\" tabindex=\"-1\"> <code>settings.gradle</code> 配置</h3>\n<p>异构了 <code>build.gradle</code> 到每个项目名字 gradle 比如 <code>spring-websocket.gradle</code></p>\n<div><pre><code>rootProject.name = &quot;spring&quot;\nrootProject.children.each {project -&gt;\n\tproject.buildFileName = &quot;${project.name}.gradle&quot;\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h2 id=\"build-gradle-主入口\" tabindex=\"-1\"> <code>build.gradle</code> 主入口</h2>\n<p>里面内容比价多， 异议分解下</p>\n<ol>\n<li>预定义很多的 plugin，大部分 apply false, 表示根项目暂时不apply这些插件， 子项目可以引入，可以从<a href=\"https://docs.gradle.org/current/userguide/plugins.html#sec:subprojects_plugins_dsl\" target=\"_blank\" rel=\"noopener noreferrer\">根项目控制版本-Applying external plugins with same version to subprojects</a>。</li>\n<li>ext 项目基本的归类， <code>framework-bom</code> 比较特别， 看名字就知道她是哥bom 类库管理项目。\n<ol>\n<li><code>moduleProjects</code> 模块项目： 所有的 <code>spring-</code> 开头项目</li>\n<li><code>javaProjects</code> java项目：剔除 <code>framework-bom</code> 的项目</li>\n</ol>\n</li>\n<li>各个项目的配置\n<ol>\n<li>所有依赖 <code>io.spring.dependency-management</code> 来管理依赖</li>\n<li>根项目 + java 项目的插件配置，主要是测试依赖部分配置</li>\n<li>java</li>\n<li>check style</li>\n<li>tool chain</li>\n<li>text fixture</li>\n</ol>\n</li>\n<li>模块项目， 单独引入 <code>spring-module.gradle</code> 配置</li>\n<li>jar 配置</li>\n<li>doc 配置</li>\n<li>jmh 配置</li>\n<li>repository 推送配置</li>\n<li>framework-bom</li>\n<li>java-platform  插件， 不需要java 插件，否则出错</li>\n<li>publications.gradle， 引入里面的任务</li>\n<li>将所有的 <code>moduleProjects</code> 项目加入到 BOM 中</li>\n</ol>\n<h2 id=\"spring-boot\" tabindex=\"-1\"> Spring Boot</h2>\n<p><a href=\"https://ge.spring.io/scans?search.timeZoneId=Asia/Shanghai\" target=\"_blank\" rel=\"noopener noreferrer\">spring scan</a> 找一个编译成功的项目开始分析。</p>\n<p>spring boot 结构相对复杂， 有193 个项目（主要在smoke test），但是一级项目没有那么多：</p>\n<div><pre><code>\nspring-boot-build +4\nspring-boot-project +14\nspring-boot\nspring-boot-actuator\nspring-boot-actuator-autoconfigure\nspring-boot-autoconfigure\nspring-boot-cli\nspring-boot-dependencies\nspring-boot-devtools\nspring-boot-docs\nspring-boot-parent\nspring-boot-properties-migrator\nspring-boot-starters +54\nspring-boot-test\nspring-boot-test-autoconfigure\nspring-boot-tools +12\nspring-boot-system-tests\nspring-boot-deployment-tests\nspring-boot-image-tests\nspring-boot-tests\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>由于 spring boot 嵌套的项目比较深， <code>settings.gradle</code> 有些技巧:</p>\n<div><pre><code>\nfile(&quot;${rootDir}/spring-boot-project/spring-boot-starters&quot;).eachDirMatch(~/spring-boot-starter.*/) {\n\tinclude &quot;spring-boot-project:spring-boot-starters:${it.name}&quot;\n}\n\nfile(&quot;${rootDir}/spring-boot-tests/spring-boot-smoke-tests&quot;).eachDirMatch(~/spring-boot-smoke-test.*/) {\n\tinclude &quot;spring-boot-tests:spring-boot-smoke-tests:${it.name}&quot;\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>gradle.properties 配置</p>\n<div><pre><code>\norg.gradle.caching<span>=</span>true\norg.gradle.parallel<span>=</span>true\norg.gradle.jvmargs<span>=</span>-Xmx2g -Dfile.encoding<span>=</span>UTF-8\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>build.gradle 配置简单， 仅仅给每个项目:</p>\n<ol>\n<li>base plugin</li>\n</ol>\n<div><pre><code>allprojects {\n\tgroup &quot;org.springframework.boot&quot;\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"spring-boot-dependencies\" tabindex=\"-1\"> spring-boot-dependencies</h3>\n<p>两个<a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools\" target=\"_blank\" rel=\"noopener noreferrer\">非常重要的插件</a>  &amp;  参考： <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.coordinates\" target=\"_blank\" rel=\"noopener noreferrer\">BOM 版本</a>  + <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.dependency-versions.properties\" target=\"_blank\" rel=\"noopener noreferrer\">版本字段</a> 。</p>\n<table>\n<thead>\n<tr>\n<th>pugin</th>\n<th>文档</th>\n<th>源码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.boot</td>\n<td>2.7.0</td>\n<td><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n<tr>\n<td>io.spring.dependency-management</td>\n<td>1.0.11.REALEASE</td>\n<td><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-gradle-plugins/dependency-management-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n</tbody>\n</table>\n<p><strong>spring-boot-parent</strong>  又是一个 bom 项目:</p>\n<div><pre><code>\nbom<span>{</span>\n    <span>....</span>\n<span>}</span>\n\ndependencies <span>{</span>\n\t<span>api</span><span>(</span><span>enforcedPlatform</span><span>(</span><span>project</span><span>(</span><span><span>\":spring-boot-project:spring-boot-dependencies\"</span></span><span>)</span><span>)</span><span>)</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>各个starter 其实是  spring-framework api bom 依赖, 比如 <code>spring-boot-starter-data-jdbc</code>:</p>\n<div><pre><code>plugins <span>{</span>\n\tid <span><span>\"org.springframework.boot.starter\"</span></span>\n<span>}</span>\n\ndescription <span>=</span> <span><span>\"Starter for using Spring Data JDBC\"</span></span>\n\ndependencies <span>{</span>\n\t<span>api</span><span>(</span><span>project</span><span>(</span><span><span>\":spring-boot-project:spring-boot-starters:spring-boot-starter-jdbc\"</span></span><span>)</span><span>)</span>\n\t<span>api</span><span>(</span><span><span>\"org.springframework.data:spring-data-jdbc\"</span></span><span>)</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>根目录的  <code>spring-boot-starter</code>:</p>\n<div><pre><code>\nplugins <span>{</span>\n\tid <span><span>\"org.springframework.boot.starter\"</span></span>\n<span>}</span>\n\ndescription <span>=</span> <span><span>\"Core starter, including auto-configuration support, logging and YAML\"</span></span>\n\ndependencies <span>{</span>\n\t<span>api</span><span>(</span><span>project</span><span>(</span><span><span>\":spring-boot-project:spring-boot\"</span></span><span>)</span><span>)</span>\n\t<span>api</span><span>(</span><span>project</span><span>(</span><span><span>\":spring-boot-project:spring-boot-autoconfigure\"</span></span><span>)</span><span>)</span>\n\t<span>api</span><span>(</span><span>project</span><span>(</span><span><span>\":spring-boot-project:spring-boot-starters:spring-boot-starter-logging\"</span></span><span>)</span><span>)</span>\n\t<span>api</span><span>(</span><span><span>\"jakarta.annotation:jakarta.annotation-api\"</span></span><span>)</span>\n\t<span>api</span><span>(</span><span><span>\"org.springframework:spring-core\"</span></span><span>)</span>\n\t<span>api</span><span>(</span><span><span>\"org.yaml:snakeyaml\"</span></span><span>)</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-28T04:37:33.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Spring 项目里内建 Gradle 插件",
      "url": "https://www.dearxue.com/web_html_tool/gradle/011_spring_boot_inner_plugin.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/011_spring_boot_inner_plugin.html",
      "content_html": "<table>\n<thead>\n<tr>\n<th>pugin</th>\n<th>文档</th>\n<th>源码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.boot</td>\n<td>2.7.0</td>\n<td><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n<tr>\n<td>io.spring.dependency-management</td>\n<td>1.0.11.REALEASE</td>\n<td><a href=\"https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">DOC</a></td>\n<td><a href=\"https://github.com/spring-gradle-plugins/dependency-management-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></td>\n</tr>\n</tbody>\n</table>\n<p>Spring 有上面两个在公共库的插件， 一个Gradle插件的开发、发布是个比较冗长的过程，那如果我们在插件的代码编写阶段，总不能修改一点点代码，就发布一个版本，然后重新运用吧？</p>\n<p>有人可能会说，那就不发布到maven仓库，而是发布到本地仓库呗，然而这样至多发布时节省一点点时间，仍然太麻烦。</p>\n<p>幸好有 <code>buildSrc</code>! 在<code>buildSrc</code>中定义的插件，可以直接在其他module中运用，可以参考spring, spring-boot 中的<a href=\"https://github.com/spring-projects/spring-boot/tree/main/buildSrc\" target=\"_blank\" rel=\"noopener noreferrer\">buildSrc</a>逻辑，所有在项目中使用的 <code>org.springframework.boot*</code> 开头插件都是以这样方式提供的。</p>\n<div><pre><code>\ngradlePlugin {\n\tplugins {\n\t\tbomPlugin {\n\t\t\tid = &quot;org.springframework.boot.bom&quot;\n\t\t\timplementationClass = &quot;org.springframework.boot.build.bom.BomPlugin&quot;\n\t\t}\n}\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>引用和使用任何第三方插件一样：</p>\n<div><pre><code>\nplugins <span>{</span>\n\tid <span><span>\"org.springframework.boot.bom\"</span></span>\n\tid <span><span>\"org.springframework.boot.conventions\"</span></span>\n\tid <span><span>\"org.springframework.boot.deployed\"</span></span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>即直接apply具体的类，而不是其发布名称，这样的话，不管做什么修改，都能马上体现，而不需要等到重新发布版本。</p>\n<p>spring boot 大概提供了10几个代码里面内带的 plugin\nspring 只扩展了三个： <code>org.springframework.build.api-diff</code>, <code>org.springframework.build.compile</code>, <code>org.springframework.build.optional-dependencies</code></p>\n<p>分析个  <code>org.springframework.build.optional.OptionalDependenciesPlugin</code></p>\n<p><a href=\"https://github.com/spring-projects/spring-boot/blob/main/buildSrc/src/main/java/org/springframework/boot/build/optional/OptionalDependenciesPlugin.java\" target=\"_blank\" rel=\"noopener noreferrer\">spring-boot &gt; OptionalDependenciesPlugin</a></p>\n<p><a href=\"https://github.com/spring-projects/spring-framework/blob/main/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\" target=\"_blank\" rel=\"noopener noreferrer\">spring-framework &gt; OptionalDependenciesPlugin</a></p>\n<p>两个实现的方式基本一样的 <code>optional</code>：</p>\n<div><pre><code>\n<span>public</span> <span>class</span> <span>OptionalDependenciesPlugin</span> <span>implements</span> <span>Plugin</span><span><span>&lt;</span><span>Project</span><span>></span></span> <span>{</span>\n\n\t<span>/**\n\t * Name of the <span>{</span><span>@code</span> <span><span>optional</span></span><span>}</span> configuration.\n\t */</span>\n\t<span>public</span> <span>static</span> <span>final</span> <span>String</span> OPTIONAL_CONFIGURATION_NAME <span>=</span> <span>\"optional\"</span><span>;</span>\n\n\t<span>@Override</span>\n\t<span>public</span> <span>void</span> <span>apply</span><span>(</span><span>Project</span> project<span>)</span> <span>{</span>\n\t\t<span>Configuration</span> optional <span>=</span> project<span>.</span><span>getConfigurations</span><span>(</span><span>)</span><span>.</span><span>create</span><span>(</span><span>\"optional\"</span><span>)</span><span>;</span>\n\t\toptional<span>.</span><span>setCanBeConsumed</span><span>(</span><span>false</span><span>)</span><span>;</span>\n\t\toptional<span>.</span><span>setCanBeResolved</span><span>(</span><span>false</span><span>)</span><span>;</span>\n\t\tproject<span>.</span><span>getPlugins</span><span>(</span><span>)</span><span>.</span><span>withType</span><span>(</span><span>JavaPlugin</span><span>.</span><span>class</span><span>,</span> <span>(</span>javaPlugin<span>)</span> <span>-></span> <span>{</span>\n\t\t\t<span>SourceSetContainer</span> sourceSets <span>=</span> project<span>.</span><span>getExtensions</span><span>(</span><span>)</span><span>.</span><span>getByType</span><span>(</span><span>JavaPluginExtension</span><span>.</span><span>class</span><span>)</span>\n\t\t\t\t\t<span>.</span><span>getSourceSets</span><span>(</span><span>)</span><span>;</span>\n\t\t\tsourceSets<span>.</span><span>all</span><span>(</span><span>(</span>sourceSet<span>)</span> <span>-></span> <span>{</span>\n\t\t\t\tproject<span>.</span><span>getConfigurations</span><span>(</span><span>)</span><span>.</span><span>getByName</span><span>(</span>sourceSet<span>.</span><span>getCompileClasspathConfigurationName</span><span>(</span><span>)</span><span>)</span><span>.</span><span>extendsFrom</span><span>(</span>optional<span>)</span><span>;</span>\n\t\t\t\tproject<span>.</span><span>getConfigurations</span><span>(</span><span>)</span><span>.</span><span>getByName</span><span>(</span>sourceSet<span>.</span><span>getRuntimeClasspathConfigurationName</span><span>(</span><span>)</span><span>)</span><span>.</span><span>extendsFrom</span><span>(</span>optional<span>)</span><span>;</span>\n\t\t\t<span>}</span><span>)</span><span>;</span>\n\t\t<span>}</span><span>)</span><span>;</span>\n\t<span>}</span>\n\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>optional</code> 作为 <code>compileOnly</code> 一个替代， 在 <code>compile</code> 和 <code>runtime</code> classpath 里面但是不会增加到 依赖里面。\n但是 <code>compileOnly</code> 其实会导致测试的 <code>classpath</code> 无法满足， 所以你会看到比较笨的解决方案：</p>\n<div><pre><code>dependencies <span>{</span>\n    compileOnly <span><span>\"org.slf4j:slf4j-api\"</span></span>\n    testImplementation <span><span>\"org.slf4j:slf4j-api\"</span></span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-22T04:11:09.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "第二学院 原则",
      "url": "https://www.dearxue.com/web_html_tool/principle.html",
      "id": "https://www.dearxue.com/web_html_tool/principle.html",
      "content_html": "<table>\n<thead>\n<tr>\n<th>版本</th>\n<th>时间</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0.0.1</td>\n<td>2022/06/22</td>\n<td>第一版 @第二学院</td>\n</tr>\n<tr>\n<td>0.0.x</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"原则\" tabindex=\"-1\"> 原则</h2>\n<ol>\n<li>第一性原理</li>\n<li>开放原则</li>\n<li>追本溯源</li>\n<li>协同效应</li>\n<li>长期目标</li>\n</ol>\n<h2 id=\"由来\" tabindex=\"-1\"> 由来</h2>\n<ol>\n<li><strong>DEAR</strong>: <code>亲爱</code>\n<ol>\n<li>保持愉悦</li>\n<li>保持真诚</li>\n</ol>\n</li>\n<li><strong>DEAR</strong>：谐音 <code>第二</code>\n<ol>\n<li>第二曲线</li>\n<li>第二春天</li>\n<li>第二机会</li>\n</ol>\n</li>\n<li><strong>DEAR</strong>: <code>鹿</code>(DEER)\n<ol>\n<li>优雅</li>\n<li>单纯</li>\n<li>好奇</li>\n</ol>\n</li>\n<li><strong>XUE</strong>: <code>学</code>\n<ol>\n<li>学而时习</li>\n<li>主动探索</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"写作\" tabindex=\"-1\"> 写作</h2>\n<ol>\n<li>教程\n<ol>\n<li>背景</li>\n<li>原理</li>\n<li>分析</li>\n</ol>\n</li>\n<li>项目\n<ol>\n<li>演示</li>\n<li>实战</li>\n</ol>\n</li>\n<li>附录\n<ol>\n<li>术语表</li>\n<li>参考表</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"不是\" tabindex=\"-1\"> 不是</h2>\n<ol>\n<li>非教学网站， 不教\\授，不解惑、不答疑！</li>\n<li>无承诺, <s>21天学会XXX</s>， <s>XXX进大厂</s></li>\n<li>无赚钱、理财、投资之道， <s>月入XXX万</s></li>\n<li>不贩卖焦虑</li>\n</ol>\n<h2 id=\"思考\" tabindex=\"-1\"> 思考</h2>\n<p><img src=\"@source/gradle/images/why_what_how.png\" alt=\"WHY WHAT HOW\" loading=\"lazy\"></p>\n<ol>\n<li>What：我是写程序\n<ol>\n<li>程序能运作</li>\n<li>问题能解决</li>\n</ol>\n</li>\n<li>How： 我是怎么写程序\n<ol>\n<li>有思考</li>\n<li>有架构</li>\n<li>有模式</li>\n<li>有原则</li>\n</ol>\n</li>\n<li>Why： 我为什么去写程序\n<ol>\n<li>赚钱，养家糊口</li>\n<li>爱好，喜欢捣鼓</li>\n<li>帮助，帮助他人</li>\n<li>改变，改变世界</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"组织\" tabindex=\"-1\"> 组织</h2>\n<ol>\n<li><a href=\"https://gitee.com/dearxuecom\" target=\"_blank\" rel=\"noopener noreferrer\">gitee</a></li>\n<li><a href=\"https://github.com/dearxuecom\" target=\"_blank\" rel=\"noopener noreferrer\">github</a></li>\n<li><a href=\"https://dearxue.com\" target=\"_blank\" rel=\"noopener noreferrer\">official web</a></li>\n</ol>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<blockquote>\n<p>“I don’t know what’s the matter with people: they don’t learn by understanding; they learn by some other way—by rote or something. Their knowledge is so fragile!”\n— Richard Feynman</p>\n</blockquote>\n<p><a href=\"https://fs.blog/first-principles/\" target=\"_blank\" rel=\"noopener noreferrer\">First Principles: The Building Blocks of True Knowledge</a></p>\n<p><img src=\"https://149664534.v2.pressablecdn.com/wp-content/uploads/2018/04/first-principles-white.jpg\" alt=\"First Principles\" loading=\"lazy\"></p>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-30T01:38:01.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Gradle 历史",
      "url": "https://www.dearxue.com/web_html_tool/gradle/001_Gradle_history.html",
      "id": "https://www.dearxue.com/web_html_tool/gradle/001_Gradle_history.html",
      "content_html": "<p>Gradle作为后起之秀，于2012年发布，比起老牌的Apache Ant和Apache Maven带来了不一样的体验，PS 大家熟悉的 spring 已经全部转换为 Gradle 构建 。</p>\n<p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。 面向Java应用为主。</p>\n<h2 id=\"dsl-构建\" tabindex=\"-1\"> DSL 构建</h2>\n<p>Gradle 的核心在于基于 Groovy 的丰富而可扩展的域描述语言(DSL)。 Groovy 通过声明性的语言元素将基于声明的构建推向下层，你可以按你想要的方式进行组合。 这些元素同样也为支持 Java， Groovy，OSGi，Web 和 Scala 项目提供了基于约定的构建。 并且，这种声明性的语言是可以扩展的。你可以添加新的或增强现有的语言元素。 因此，它提供了简明、可维护和易理解的构建。</p>\n<p>你基本可以像编写java 程序一样，组织你的项目结构，编译、测试、打包、发行，包以来关系，无缝衔接。</p>\n<h2 id=\"构建结构化\" tabindex=\"-1\"> 构建结构化</h2>\n<p>Gradle 的灵活和丰富性让你既可以遵循业界规范组织你的项目结构，也提供了高度的定制。</p>\n<p>例如，它可以很容易地将你的构建拆分为多个可重用的模块，最后再进行组装，创建一个结构良好，易于维护，易于理解的构建。</p>\n<p>单模块、多模块， POM管理等！</p>\n<h2 id=\"深度-api\" tabindex=\"-1\"> 深度 API</h2>\n<p>Gradle 允许你在构建执行的整个生命周期，对它的核心配置及执行行为进行监视并自定义。</p>\n<h2 id=\"gradle-的扩展\" tabindex=\"-1\"> Gradle 的扩展</h2>\n<p>Gradle 有非常良好的扩展性。 从简单的单项目构建，到庞大的多项目构建，它都能显著地提升你的效率。 这才是真正的结构化构建。通过的增量构建功能，可以解决构建的性能瓶颈问题。</p>\n<h2 id=\"多种方式管理依赖\" tabindex=\"-1\"> 多种方式管理依赖</h2>\n<p>不同的团队喜欢用不同的方式来管理他们的外部依赖。 从 Maven 和 Ivy 的远程仓库的传递依赖管理，到本地文件系统的 jar 包或目录，Gradle 对所有的管理策略都提供了方便的支持。</p>\n<h2 id=\"易于移植\" tabindex=\"-1\"> 易于移植</h2>\n<p>Gradle 能适应你已有的任何结构。因此，你总可以在你构建项目的同一个分支当中开发你的 Gradle 构建脚本，并且它们能够并行进行。 我们通常建议编写测试，以保证生成的文件是一样的。 这种移植方式会尽可能的可靠和减少破坏性。这也是重构的最佳做法。</p>\n<h2 id=\"groovy\" tabindex=\"-1\"> Groovy</h2>\n<p>Gradle 的构建脚本是采用 Groovy 写的，而不是用 XML，整个 Gradle 的 API 都是完全 groovy 化的。只有通过 Groovy才能去运用它并对它提高效率。</p>\n<h2 id=\"gradle-wrapper\" tabindex=\"-1\"> Gradle wrapper</h2>\n<p>Gradle Wrapper 允许你在没有安装 Gradle 的机器上执行 Gradle 构建。 这一点是非常有用的。比如，对一些持续集成服务来说。 它对一个开源项目保持低门槛构建也是非常有用的。 Wrapper 对企业来说也很有用，它使得对客户端计算机零配置。 它强制使用指定的版本，以减少兼容支持问题。</p>\n<p>Maven 同样也有这样的功能， 开箱即用！</p>\n<h2 id=\"安装\" tabindex=\"-1\"> 安装</h2>\n<p><a href=\"https://gradle.org/install/\" target=\"_blank\" rel=\"noopener noreferrer\">官方安装指导</a></p>\n<ol>\n<li>下载： <a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">地址</a></li>\n<li>放到安装目录</li>\n<li>设置环境变量</li>\n</ol>\n<h3 id=\"window\" tabindex=\"-1\"> Window</h3>\n<div><pre><code>C:<span>\\</span>Gradle\n解压\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p><strong>系统配置</strong>, 在桌面上右键点击“电脑”（又名“我的电脑”或”此电脑”）:</p>\n<ol>\n<li>然后选择“属性”，打开 “高级” 选项卡，</li>\n<li>点击“环境变量”</li>\n<li>点击“编辑”后新建一个环境变量项， 把解压的目录<code>d:\\maven.xxx\\bin</code>放入输入框中并点击 “确定”.</li>\n</ol>\n<h3 id=\"mac-linux\" tabindex=\"-1\"> Mac/Linux</h3>\n<div><pre><code>\n$ <span>mkdir</span> /opt/gradle\n$ <span>unzip</span> -d /opt/gradle gradle-7.4.2-bin.zip\n$ <span>ls</span> /opt/gradle/gradle-7.4.2\nLICENSE  NOTICE  bin  getting-started.html  init.d  lib  media\n\n---\n\n$ <span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span>:/opt/gradle/gradle-7.4.2/bin\n或者到 ~/.bash_profile 设置\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>安装完：</p>\n<div><pre><code><span>></span>gradle -v\n\n------------------------------------------------------------\nGradle <span>7.4</span>.2\n------------------------------------------------------------\n\nBuild time:   <span>2022</span>-03-31 <span>15</span>:25:29 UTC\nRevision:     540473b8118064efcc264694cbcaa4b677f61041\n\nKotlin:       <span>1.5</span>.31\nGroovy:       <span>3.0</span>.9\nAnt:          Apache Ant<span>(</span>TM<span>)</span> version <span>1.10</span>.11 compiled on July <span>10</span> <span>2021</span>\nJVM:          <span>18.0</span>.1.1 <span>(</span>Oracle Corporation <span>18.0</span>.1.1+2-6<span>)</span>\nOS:           Windows <span>10</span> <span>10.0</span> amd64\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-22T04:11:09.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Gradle 后起之秀",
      "url": "https://www.dearxue.com/web_html_tool/gradle/",
      "id": "https://www.dearxue.com/web_html_tool/gradle/",
      "content_html": "<p>Gradle作为后起之秀，于2012年发布，比起老牌的Apache Ant和Apache Maven带来了不一样的体验，PS 大家熟悉的 spring 已经全部转换为 Gradle 构建 。</p>\n<p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。 面向Java应用为主。</p>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-23T00:58:02.000Z",
      "authors": [],
      "tags": [
        "Gradle"
      ]
    },
    {
      "title": "Maven 是什么",
      "url": "https://www.dearxue.com/web_html_tool/maven/001_Maven_history.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/001_Maven_history.html",
      "content_html": "<p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具</p>\n<p>Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。</p>\n<h2 id=\"一点历史\" tabindex=\"-1\"> 一点历史</h2>\n<p>Maven, 是一个 Yiddish 语言，意思是知识丰富者，也就是行家、专家意思。</p>\n<p>Maven 最初是在 Jakarta Turbine 项目中为了简化构建过程而设计的。项目中有几个子工程，每个工程包含稍有不同的 ANT 文件。JAR 文件使用 CVS 管理。</p>\n<p>Apache 小组随后开发了 Maven，能够同时构建多个工程、发布工程信息、部署工程、在几个工程中共享 JAR 文件，并且协助团队合作。</p>\n<h2 id=\"maven-的目标\" tabindex=\"-1\"> Maven 的目标</h2>\n<p>Maven 的主要目的是为开发者提供</p>\n<ol>\n<li>一个可复用、可维护、更易理解的工程综合模型</li>\n<li>与这个模型交互的插件或者工具</li>\n</ol>\n<p>Maven 工程结构和内容被定义在一个 xml 文件中 － pom.xml，是 Project Object Model (POM) 的简称，此文件是整个 Maven 系统的基础组件。</p>\n<h2 id=\"maven-能做什么\" tabindex=\"-1\"> Maven 能做什么</h2>\n<p>Maven 能够帮助开发者完成以下工作：</p>\n<ol>\n<li>构建</li>\n<li>文档生成</li>\n<li>报告</li>\n<li>依赖</li>\n<li>SCMs (Software Configuration Management, Source Code/Control Management)，比如git</li>\n<li>发布</li>\n<li>分发</li>\n<li>邮件列表</li>\n</ol>\n<p>总的来说，Maven 简化了工程的构建过程，并对其标准化。它无缝衔接了编译、发布、文档生成、团队合作和其他任务。Maven 提高了重用性，负责了大部分构建相关的任务。</p>\n<h2 id=\"maven-的-coc\" tabindex=\"-1\"> Maven 的 COC</h2>\n<p>Convention Over Configuration</p>\n<p>Maven 使用约定而不是配置，意味着开发者不需要再自己创建构建过程。</p>\n<p>开发者不需要再关心每一个配置细节。Maven 为工程提供了合理的默认行为。当创建 Maven 工程时，Maven 会创建默认的工程结构。开发者只需要合理的放置文件，而在 pom.xml 中不再需要定义任何配置。</p>\n<p>举例说明，生命周期、资源文件的默认配置，和其他一些配置。假定 ${basedir} 表示工程目录：</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>配置值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Source code</td>\n<td>${basedir}/src/main/java</td>\n</tr>\n<tr>\n<td>Resources</td>\n<td>${basedir}/src/main/resources</td>\n</tr>\n<tr>\n<td>Tests</td>\n<td>${basedir}/src/test</td>\n</tr>\n<tr>\n<td>Complied byte code</td>\n<td>${basedir}/target</td>\n</tr>\n<tr>\n<td>Distributable JAR</td>\n<td>${basedir}/target/classes</td>\n</tr>\n</tbody>\n</table>\n<p>约定俗成的代码结构， 包括POM写法非常重要：</p>\n<ol>\n<li>省去定制配置，和行业一致</li>\n<li>团队沟通统一</li>\n</ol>\n<p><strong>项目目录</strong></p>\n<div><pre><code>D:<span>\\</span>learn<span>\\</span>maven\n\n<span>|</span>   .gitignore\n<span>|</span>   README.md\n<span>|</span>   mvnw\n<span>|</span>   mvnw.cmd\n<span>|</span>   pom.xml\n<span>|</span>\n+---.mvn\n<span>|</span>   <span>\\</span>---wrapper\n<span>|</span>           maven-wrapper.jar\n<span>|</span>           maven-wrapper.properties\n<span>|</span>\n<span>\\</span>---src\n    +---main\n    <span>|</span>   +---java\n    <span>|</span>   <span>|</span>   <span>\\</span>---com\n    <span>|</span>   <span>|</span>       <span>\\</span>---dearxue\n    <span>|</span>   <span>|</span>           <span>\\</span>---mvn\n    <span>|</span>   <span>|</span>               <span>\\</span>---demo\n    <span>|</span>   <span>|</span>                       DemoApplication.java\n    <span>|</span>   <span>|</span>\n    <span>|</span>   <span>\\</span>---resources\n    <span>|</span>       <span>|</span>   application.yml\n    <span>|</span>       <span>|</span>\n    <span>|</span>       +---static\n    <span>|</span>       <span>\\</span>---templates\n    <span>\\</span>---test\n        <span>\\</span>---java\n            <span>\\</span>---com\n                <span>\\</span>---dearxue\n                    <span>\\</span>---mvn\n                        <span>\\</span>---demo\n                                DemoApplicationTests.java\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>pom.xml</code>  例子：</p>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span> <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n <span><span><span>&lt;</span>parent</span><span>></span></span>\n  <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-parent<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n  <span><span><span>&lt;</span>relativePath</span><span>/></span></span> <span>&lt;!-- lookup parent from repository --></span>\n <span><span><span>&lt;/</span>parent</span><span>></span></span>\n <span><span><span>&lt;</span>groupId</span><span>></span></span>com.dearxue.mvn<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n <span><span><span>&lt;</span>artifactId</span><span>></span></span>demo<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n <span><span><span>&lt;</span>version</span><span>></span></span>0.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>\n <span><span><span>&lt;</span>name</span><span>></span></span>demo<span><span><span>&lt;/</span>name</span><span>></span></span>\n <span><span><span>&lt;</span>description</span><span>></span></span>Dearxue.com 如何使用 maven <span><span><span>&lt;/</span>description</span><span>></span></span>\n <span><span><span>&lt;</span>properties</span><span>></span></span>\n     <span>&lt;!-- 标准配置 --></span>\n  <span><span><span>&lt;</span>java.version</span><span>></span></span>1.8<span><span><span>&lt;/</span>java.version</span><span>></span></span>\n  <span><span><span>&lt;</span>spring-cloud.version</span><span>></span></span>2021.0.3<span><span><span>&lt;/</span>spring-cloud.version</span><span>></span></span>\n  <span><span><span>&lt;</span>testcontainers.version</span><span>></span></span>1.17.2<span><span><span>&lt;/</span>testcontainers.version</span><span>></span></span>\n <span><span><span>&lt;/</span>properties</span><span>></span></span>\n <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.cloud<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-cloud-starter-netflix-eureka-client<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-configuration-processor<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n   <span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n   <span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n   <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>groupId</span><span>></span></span>org.testcontainers<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n   <span><span><span>&lt;</span>artifactId</span><span>></span></span>junit-jupiter<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n   <span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n <span><span><span>&lt;</span>dependencyManagement</span><span>></span></span>\n  <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n   <span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.cloud<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-cloud-dependencies<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>${spring-cloud.version}<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n    <span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n   <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n   <span><span><span>&lt;</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.testcontainers<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>testcontainers-bom<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>${testcontainers.version}<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n    <span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n   <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n <span><span><span>&lt;/</span>dependencyManagement</span><span>></span></span>\n\n <span><span><span>&lt;</span>build</span><span>></span></span>\n  <span><span><span>&lt;</span>plugins</span><span>></span></span>\n   <span><span><span>&lt;</span>plugin</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>configuration</span><span>></span></span>\n     <span><span><span>&lt;</span>excludes</span><span>></span></span>\n      <span><span><span>&lt;</span>exclude</span><span>></span></span>\n       <span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n       <span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n      <span><span><span>&lt;/</span>exclude</span><span>></span></span>\n     <span><span><span>&lt;/</span>excludes</span><span>></span></span>\n    <span><span><span>&lt;/</span>configuration</span><span>></span></span>\n   <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n  <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n <span><span><span>&lt;/</span>build</span><span>></span></span>\n\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>Maven 里面概念：</p>\n<ol>\n<li>phrase 周期</li>\n<li>goal 目标</li>\n<li>depedency 依赖</li>\n<li>depedency mangement 依赖管理</li>\n</ol>\n<p>这些都是通过 Maven 自带的或者插件来完成， 比如我们熟悉的spring boot 插件扩展等。</p>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 环境建立",
      "url": "https://www.dearxue.com/web_html_tool/maven/002_Maven_install.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/002_Maven_install.html",
      "content_html": "<h2 id=\"java\" tabindex=\"-1\"> Java</h2>\n<p>检查下安装了否：</p>\n<div><pre><code>java -version\n\nD:<span>\\</span>aaron<span>\\</span>workspace<span>\\</span>project<span>\\</span>xue<span>\\</span>demo<span>\\</span>demo<span>></span>java -version\njava version <span>\"18.0.1.1\"</span> <span>2022</span>-04-22\nJava<span>(</span>TM<span>)</span> SE Runtime Environment <span>(</span>build <span>18.0</span>.1.1+2-6<span>)</span>\nJava HotSpot<span>(</span>TM<span>)</span> <span>64</span>-Bit Server VM <span>(</span>build <span>18.0</span>.1.1+2-6, mixed mode, sharing<span>)</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如若没有安装， 安装 Java 软件开发套件（SDK）：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle JDK </a>， 当然还有 Open JDK 等。</p>\n<h3 id=\"环境设置\" tabindex=\"-1\"> 环境设置</h3>\n<p>设置 JAVA_HOME 环境变量，并指向你机器上的 Java 安装目录。例如：</p>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Window</td>\n<td>C:\\Program Files\\Java\\jdk-XXX 具体看你的安装版本</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>export JAVA_HOME=/usr/local/java-current</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>~/.bash_profile 加入 export JAVA_HOME=`/usr/libexec/java_home -v 18`</td>\n</tr>\n</tbody>\n</table>\n<p>注意 linux 用soft link, MAC 用一个表达式，也就是一个环境可以有多个jdk 版本。</p>\n<p>添加到系统目录</p>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Window</td>\n<td>Path=%JAVA_HOME%\\bin;&lt;现有的其他路径&gt;  注意是bin</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>export PATH=<span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.6833em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>A</span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.08125em;\">H</span><span style=\"margin-right:0.2778em;\"></span><span>:</span></span></span></span>JAVA_HOME/bin/</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>~/.bash_profile 加入 export PATH=<span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.09618em;\">J</span><span>A</span><span style=\"margin-right:0.22222em;\">V</span><span><span>A</span><span><span><span><span style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.08125em;\">H</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.05764em;\">OME</span><span>/</span><span>bin</span><span style=\"margin-right:0.2778em;\"></span><span>:</span></span></span></span>PATH</td>\n</tr>\n</tbody>\n</table>\n<p>Mac 加完后需要重新  <code>source ~/.bash_profile</code>\nPATH 如何设置也可以参考 <a href=\"https://www.java.com/zh-CN/download/help/path.html\" target=\"_blank\" rel=\"noopener noreferrer\">oracle 官方文档</a>。</p>\n<h3 id=\"maven\" tabindex=\"-1\"> Maven</h3>\n<p><a href=\"http://maven.apache.org/download.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache maven download</a> 官方下载最新的包。</p>\n<p>Maven 下载下来只是一个压缩包(zip),安装只是个解压的过程，所以可以解压到任何目录下。</p>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>位置 (根据你的安装位置而定)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows</td>\n<td>E:\\Maven\\apache-maven-X.X.X</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>/usr/local/apache-maven-X.X.X</td>\n</tr>\n<tr>\n<td>Mac</td>\n<td>/usr/local/apache-maven-X.X.X</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"window\" tabindex=\"-1\"> Window</h4>\n<p>右键 &quot;计算机&quot;，选择 &quot;属性&quot;，之后点击 &quot;高级系统设置&quot;，点击&quot;环境变量&quot;，来设置环境变量，有以下系统变量需要配置：</p>\n<ol>\n<li>新建系统变量 MAVEN_HOME，变量值：E:\\Maven\\apache-maven-X.X.X</li>\n<li>编辑系统变量 Path，添加变量值：;%MAVEN_HOME%\\bin</li>\n</ol>\n<p><code>mvn --version</code>  检查版本信息：</p>\n<div><pre><code>\nD:<span>\\</span>workspace<span>\\</span>project<span>\\</span>xue<span>\\</span><span>></span>mvn --version\nApache Maven <span>3.8</span>.5 <span>(</span>3599d3414f046de2324203b78ddcf9b5e4388aa0<span>)</span>\nMaven home: D:<span>\\</span>aaron<span>\\</span>software<span>\\</span>apache-maven-3.8.5\nJava version: <span>18.0</span>.1.1, vendor: Oracle Corporation, runtime: C:<span>\\</span>Program Files<span>\\</span>Java<span>\\</span>jdk-18.0.1.1\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: <span>\"windows 10\"</span>, version: <span>\"10.0\"</span>, arch: <span>\"amd64\"</span>, family: <span>\"windows\"</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"linux\" tabindex=\"-1\"> Linux</h4>\n<p>下载解压：</p>\n<div><pre><code><span># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz</span>\n<span># tar -xvf  apache-maven-3.3.9-bin.tar.gz</span>\n<span># sudo mv -f apache-maven-3.3.9 /usr/local/</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>编辑 /etc/profile 文件 sudo vim /etc/profile，在文件末尾添加如下代码：</p>\n<div><pre><code><span>export</span> <span>MAVEN_HOME</span><span>=</span>/usr/local/apache-maven-3.3.9\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>${<span>PATH</span>}</span><span>:</span><span>${MAVEN_HOME}</span>/bin\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>保存文件，并运行如下命令使环境变量生效：</p>\n<div><pre><code><span># source /etc/profile</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功：</p>\n<div><pre><code><span># mvn -v</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"mac\" tabindex=\"-1\"> Mac</h4>\n<p>下载解压：</p>\n<div><pre><code><span>$curl</span> -O http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz\n<span>$tar</span> -xvf  apache-maven-3.3.9-bin.tar.gz\n<span>$sudo</span> <span>mv</span> -f apache-maven-3.3.9 /usr/local/\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>编辑 /etc/profile 文件 sudo vim /etc/profile，在文件末尾添加如下代码：</p>\n<div><pre><code><span>export</span> <span>MAVEN_HOME</span><span>=</span>/usr/local/apache-maven-3.3.9\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>${<span>PATH</span>}</span><span>:</span><span>${MAVEN_HOME}</span>/bin\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>保存文件，并运行如下命令使环境变量生效：</p>\n<div><pre><code>\n<span>$source</span> /etc/profile\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功：</p>\n<div><pre><code>\n<span>$mvn</span> -v\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>安装完毕后也可以通过  <code>mvn --help</code> 来查看帮助：</p>\n<div><pre><code>usage: mvn <span>[</span>options<span>]</span> <span>[</span><span>&lt;</span>goal<span>(</span>s<span>)</span><span>></span><span>]</span> <span>[</span><span>&lt;</span>phase<span>(</span>s<span>)</span><span>></span><span>]</span>\n\nOptions:\n -am,--also-make                        If project list is specified, also\n                                        build projects required by the\n                                        list\n -amd,--also-make-dependents            If project list is specified, also\n                                        build projects that depend on\n                                        projects on the list\n -B,--batch-mode                        Run <span>in</span> non-interactive <span>(</span>batch<span>)</span>\n                                        mode <span>(</span>disables output color<span>)</span>\n -b,--builder <span>&lt;</span>arg<span>></span>                     The <span>id</span> of the build strategy to\n                                        use\n -C,--strict-checksums                  Fail the build <span>if</span> checksums don<span>'t\n                                        match\n -c,--lax-checksums                     Warn if checksums don'</span>t match\n    --color <span>&lt;</span>arg<span>></span>                       Defines the color mode of the\n                                        output. Supported are <span>'auto'</span>,\n                                        <span>'always'</span>, <span>'never'</span><span>.</span>\n -cpu,--check-plugin-updates            Ineffective, only kept <span>for</span>\n                                        backward compatibility\n -D,--define <span>&lt;</span>arg<span>></span>                      Define a system property\n -e,--errors                            Produce execution error messages\n -emp,--encrypt-master-password <span>&lt;</span>arg<span>></span>   Encrypt master security password\n -ep,--encrypt-password <span>&lt;</span>arg<span>></span>           Encrypt server password\n -f,--file <span>&lt;</span>arg<span>></span>                        Force the use of an alternate POM\n                                        <span>file</span> <span>(</span>or directory with pom.xml<span>)</span>\n -fae,--fail-at-end                     Only fail the build afterwards<span>;</span>\n                                        allow all non-impacted builds to\n                                        <span>continue</span>\n -ff,--fail-fast                        Stop at first failure <span>in</span>\n                                        reactorized builds\n -fn,--fail-never                       NEVER fail the build, regardless\n                                        of project result\n -gs,--global-settings <span>&lt;</span>arg<span>></span>            Alternate path <span>for</span> the global\n                                        settings <span>file</span>\n                                        \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven POM",
      "url": "https://www.dearxue.com/web_html_tool/maven/003_Maven_POM.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/003_Maven_POM.html",
      "content_html": "<p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p>\n<p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 pom.xml，获取所需的配置信息，然后执行目标。</p>\n<p>POM 中可以指定以下配置：</p>\n<ol>\n<li>项目依赖 dependencies</li>\n<li>插件 plugins</li>\n<li>执行目标 goals</li>\n<li>项目构建 profile</li>\n<li>项目版本 version</li>\n<li>项目开发者列表 developers</li>\n<li>相关邮件列表信息 mail lists</li>\n</ol>\n<p>在创建 POM 之前，我们首先确定工程组（groupId），及其名称（artifactId）和版本，在仓库中这些属性是工程的唯一标识,Maven只需要3个变量即可唯一确定某个jar包：</p>\n<ol>\n<li>groupId：属于组织的名称，类似Java的包名；</li>\n<li>artifactId：该jar包自身的名称，类似Java的类名；</li>\n<li>version：该jar包的版本。</li>\n</ol>\n<h2 id=\"例子\" tabindex=\"-1\"> 例子</h2>\n<div><pre><code><span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span> <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n  <span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n  \n  <span><span><span>&lt;</span>groupId</span><span>></span></span>com.dearxue.mvn<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>demo<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>version</span><span>></span></span>0.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>\n  <span><span><span>&lt;</span>name</span><span>></span></span>demo<span><span><span>&lt;/</span>name</span><span>></span></span>\n  <span><span><span>&lt;</span>description</span><span>></span></span>learn example of the maven usage<span><span><span>&lt;/</span>description</span><span>></span></span>\n \n<span><span><span>&lt;/</span>project</span><span>></span></span>  \n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>每个工程应该只有一个 POM 文件(多modules后续再说)。 一个完整的例子</p>\n<div><pre><code>\n<span>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span><span><span>&lt;</span>project</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0<span>\"</span></span> <span><span>xmlns:</span>xsi</span><span><span>=</span><span>\"</span>http://www.w3.org/2001/XMLSchema-instance<span>\"</span></span>\n\t<span><span>xsi:</span>schemaLocation</span><span><span>=</span><span>\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span>\"</span></span><span>></span></span>\n\t<span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n\t<span><span><span>&lt;</span>parent</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-parent<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>relativePath</span><span>/></span></span> <span>&lt;!-- lookup parent from repository --></span>\n\t<span><span><span>&lt;/</span>parent</span><span>></span></span>\n\t<span><span><span>&lt;</span>groupId</span><span>></span></span>com.dearxue.mvn<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>demo<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t<span><span><span>&lt;</span>version</span><span>></span></span>0.0.1-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>\n\t<span><span><span>&lt;</span>name</span><span>></span></span>demo<span><span><span>&lt;/</span>name</span><span>></span></span>\n\t<span><span><span>&lt;</span>description</span><span>></span></span>learn example of the maven usage<span><span><span>&lt;/</span>description</span><span>></span></span>\n\t<span><span><span>&lt;</span>properties</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>java.version</span><span>></span></span>1.8<span><span><span>&lt;/</span>java.version</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>spring-cloud.version</span><span>></span></span>2021.0.3<span><span><span>&lt;/</span>spring-cloud.version</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>testcontainers.version</span><span>></span></span>1.17.2<span><span><span>&lt;/</span>testcontainers.version</span><span>></span></span>\n\t<span><span><span>&lt;/</span>properties</span><span>></span></span>\n\t<span><span><span>&lt;</span>dependencies</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-web<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.cloud<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-cloud-starter-netflix-eureka-client<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-configuration-processor<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-test<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.testcontainers<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>junit-jupiter<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>scope</span><span>></span></span>test<span><span><span>&lt;/</span>scope</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t<span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\t<span><span><span>&lt;</span>dependencyManagement</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>dependencies</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.cloud<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-cloud-dependencies<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>version</span><span>></span></span>${spring-cloud.version}<span><span><span>&lt;/</span>version</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n\t\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>dependency</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.testcontainers<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>testcontainers-bom<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>version</span><span>></span></span>${testcontainers.version}<span><span><span>&lt;/</span>version</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n\t\t\t<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n\t<span><span><span>&lt;/</span>dependencyManagement</span><span>></span></span>\n\n\t<span><span><span>&lt;</span>build</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>plugins</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>plugin</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>configuration</span><span>></span></span>\n\t\t\t\t\t<span><span><span>&lt;</span>excludes</span><span>></span></span>\n\t\t\t\t\t\t<span><span><span>&lt;</span>exclude</span><span>></span></span>\n\t\t\t\t\t\t\t<span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n\t\t\t\t\t\t\t<span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n\t\t\t\t\t\t<span><span><span>&lt;/</span>exclude</span><span>></span></span>\n\t\t\t\t\t<span><span><span>&lt;/</span>excludes</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;/</span>configuration</span><span>></span></span>\n\t\t\t<span><span><span>&lt;/</span>plugin</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>plugins</span><span>></span></span>\n\t<span><span><span>&lt;/</span>build</span><span>></span></span>\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 构建流程",
      "url": "https://www.dearxue.com/web_html_tool/maven/004_Maven_Build.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/004_Maven_Build.html",
      "content_html": "<h2 id=\"生命周期-lifecycle\" tabindex=\"-1\"> 生命周期 Lifecycle</h2>\n<p>构建生命周期是一组阶段的序列（sequence of phases），每个阶段定义了目标被执行的顺序。这里的阶段是生命周期的一部分。</p>\n<p>举例说明，一个典型的 Maven 构建生命周期是由以下几个阶段的序列组成的：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2018/09/maven-package-build-phase.png\" alt=\"image\" loading=\"lazy\"></p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>处理</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>验证 validate</td>\n<td>验证项目</td>\n<td>验证项目是否正确且所有必须信息是可用的</td>\n</tr>\n<tr>\n<td>编译 compile</td>\n<td>执行编译</td>\n<td>源代码编译在此阶段完成</td>\n</tr>\n<tr>\n<td>测试 Test</td>\n<td>测试</td>\n<td>使用适当的单元测试框架（例如JUnit）运行测试。</td>\n</tr>\n<tr>\n<td>包装 package</td>\n<td>打包</td>\n<td>创建JAR/WAR包如在 pom.xml 中定义提及的包</td>\n</tr>\n<tr>\n<td>检查 verify</td>\n<td>检查</td>\n<td>对集成测试的结果进行检查，以保证质量达标</td>\n</tr>\n<tr>\n<td>安装 install</td>\n<td>安装</td>\n<td>安装打包的项目到本地仓库，以供其他项目使用</td>\n</tr>\n<tr>\n<td>部署 deploy</td>\n<td>部署</td>\n<td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td>\n</tr>\n</tbody>\n</table>\n<p>为了完成 default 生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。</p>\n<p>Maven 有以下三个标准的生命周期：</p>\n<ol>\n<li>clean：项目清理的处理</li>\n<li>default(或 build)：项目部署的处理</li>\n<li>site：项目站点文档创建的处理</li>\n</ol>\n<h2 id=\"阶段-phase\" tabindex=\"-1\"> 阶段 Phase</h2>\n<p>以内置的生命周期default为例，它包含以下phase：</p>\n<ol>\n<li>validate</li>\n<li>initialize</li>\n<li>generate-sources</li>\n<li>process-sources</li>\n<li>generate-resources</li>\n<li>process-resources</li>\n<li>compile</li>\n<li>process-classes</li>\n<li>generate-test-sources</li>\n<li>process-test-sources</li>\n<li>generate-test-resources</li>\n<li>process-test-resources</li>\n<li>test-compile</li>\n<li>process-test-classes</li>\n<li>test</li>\n<li>prepare-package</li>\n<li>package</li>\n<li>pre-integration-test</li>\n<li>integration-test</li>\n<li>post-integration-test</li>\n<li>verify</li>\n<li>install</li>\n<li>deploy</li>\n</ol>\n<p>如果我们运行<code>mvn package</code>，Maven就会执行default生命周期，它会从开始一直运行到package这个phase为止：</p>\n<ol>\n<li>validate</li>\n<li>...</li>\n<li>package</li>\n</ol>\n<p>如果我们运行<code>mvn compile</code>，Maven也会执行default生命周期，但这次它只会运行到compile，即以下几个phase：</p>\n<ol>\n<li>validate</li>\n<li>...</li>\n<li>compile</li>\n</ol>\n<p>Maven另一个常用的生命周期是clean，它会执行3个phase：</p>\n<ol>\n<li>pre-clean</li>\n<li>clean （注意这个clean不是lifecycle而是phase）</li>\n<li>post-clean</li>\n</ol>\n<p>在实际开发过程中，经常使用的命令有：</p>\n<ol>\n<li><code>mvn clean</code>：清理所有生成的class和jar；</li>\n<li><code>mvn clean compile</code>：先清理，再执行到compile；</li>\n<li><code>mvn clean test</code>：先清理，再执行到test，因为执行test前必须执行compile，所以这里不必指定compile；</li>\n</ol>\n<p>mvn clean package：先清理，再执行到package。</p>\n<h2 id=\"目标-goal\" tabindex=\"-1\"> 目标 Goal</h2>\n<p>目标表示一个特定的、对构建和管理工程有帮助的任务。它可能绑定了 0 个或多个构建阶段。没有绑定任何构建阶段的目标可以在构建生命周期之外被直接调用执行。</p>\n<p>执行的顺序依赖于目标和构建阶段被调用的顺序。例如，考虑下面的命令。clean 和 package 参数是构建阶段，而 dependency:copy-dependencies 是一个目标。</p>\n<div><pre><code>mvn clean dependency:copy-dependencies package\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这里的 clean 阶段将会被首先执行，然后 dependency:copy-dependencies 目标会被执行，最终 package 阶段被执行</p>\n<p>执行一个phase又会触发一个或多个goal：</p>\n<table>\n<thead>\n<tr>\n<th>执行的Phase</th>\n<th>对应执行的Goal</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile</td>\n<td>compiler:compile</td>\n</tr>\n<tr>\n<td>test</td>\n<td>compiler:testCompile  &amp; surefire:test</td>\n</tr>\n</tbody>\n</table>\n<p>goal的命名总是abc:xyz这种形式。</p>\n<p>类比一下他们之间的关系，就明白了：</p>\n<ol>\n<li>lifecycle相当于Java的package，它包含一个或多个phase；</li>\n<li>phase相当于Java的class，它包含一个或多个goal；</li>\n<li>goal相当于class的method，它其实才是真正干活的。</li>\n</ol>\n<p>大多数情况，我们只要指定phase，就默认执行这些phase默认绑定的goal，只有少数情况，我们可以直接指定运行一个goal，例如，启动Tomcat服务器：<code>mvn tomcat:run</code> ； 或者如spring 开发中常用的：   <code>mvn sprint-boot:run</code></p>\n<p>一图胜千言：</p>\n<p><img src=\"https://connected2know.com/programming/wp-content/uploads/2020/06/MavenLifecycle2.png\" alt=\"image\" loading=\"lazy\"></p>\n",
      "image": "https://www.runoob.com/wp-content/uploads/2018/09/maven-package-build-phase.png",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 插件",
      "url": "https://www.dearxue.com/web_html_tool/maven/005_Maven_Plugin.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/005_Maven_Plugin.html",
      "content_html": "<h2 id=\"概述\" tabindex=\"-1\"> 概述</h2>\n<p>Maven 有以下三个标准的生命周期：</p>\n<ol>\n<li>clean：项目清理的处理</li>\n<li>default(或 build)：项目部署的处理</li>\n<li>site：项目站点文档创建的处理</li>\n</ol>\n<p><img src=\"https://connected2know.com/programming/wp-content/uploads/2020/06/MavenLifecycle2.png\" alt=\"image\" loading=\"lazy\"></p>\n<p>每个生命周期中都包含着一系列的阶段(phase)。这些 phase 就相当于 Maven 提供的统一的接口，然后这些 phase 的实现由 Maven 的插件来完成。</p>\n<p>我们在输入 mvn 命令的时候 比如 <code>mvn clean</code>，clean 对应的就是 Clean 生命周期中的 clean 阶段。但是 clean 的具体操作是由 <strong>maven-clean-plugin</strong> 来实现的。</p>\n<p>所以说 Maven 生命周期的每一个阶段的具体实现都是由 Maven 插件实现的。</p>\n<p>Maven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。Maven 插件通常被用来：</p>\n<ol>\n<li>创建 jar 文件</li>\n<li>创建 war 文件</li>\n<li>编译代码文件</li>\n<li>代码单元测试</li>\n<li>创建工程文档</li>\n<li>创建工程报告</li>\n</ol>\n<p>插件通常提供了一个目标的集合，并且可以使用下面的语法执行：</p>\n<div><pre><code>mvn <span>[</span>plugin-name<span>]</span>:<span>[</span>goal-name<span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：</p>\n<div><pre><code>\nmvn compiler:compile\n\n也就是我们的  \n\nmvn compile\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。</p>\n<h2 id=\"类型\" tabindex=\"-1\"> 类型</h2>\n<p>Maven 提供了下面两种类型的插件：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Build plugins</td>\n<td>在构建时执行，并在 pom.xml 的 元素中配置。</td>\n</tr>\n<tr>\n<td>Reporting plugins</td>\n<td>在网站生成过程中执行，并在 pom.xml 的 元素中配置。</td>\n</tr>\n</tbody>\n</table>\n<p>下面是一些常用插件的列表：</p>\n<table>\n<thead>\n<tr>\n<th>插件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clean</td>\n<td>构建之后清理目标文件。删除目标目录。</td>\n</tr>\n<tr>\n<td>compiler</td>\n<td>编译 Java 源文件。</td>\n</tr>\n<tr>\n<td>surefile</td>\n<td>运行 JUnit 单元测试。创建测试报告。</td>\n</tr>\n<tr>\n<td>jar</td>\n<td>从当前工程中构建 JAR 文件。</td>\n</tr>\n<tr>\n<td>war</td>\n<td>从当前工程中构建 WAR 文件。</td>\n</tr>\n<tr>\n<td>javadoc</td>\n<td>为工程生成 Javadoc。</td>\n</tr>\n</tbody>\n</table>\n<p>我们最熟悉的莫如 spring 中常用的</p>\n<div><pre><code><span><span><span>&lt;</span>build</span><span>></span></span>\n    <span><span><span>&lt;</span>plugins</span><span>></span></span>\n      <span><span><span>&lt;</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n        <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n        <span><span><span>&lt;</span>executions</span><span>></span></span>\n\t\t\t<span><span><span>&lt;</span>execution</span><span>></span></span>\n   \t\t\t <span><span><span>&lt;</span>phase</span><span>></span></span>\n\t\t\t\t    ...\n\t\t\t\t<span><span><span>&lt;/</span>phase</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>goals</span><span>></span></span>\n\t\t\t\t    ...\n\t\t\t\t<span><span><span>&lt;/</span>goals</span><span>></span></span>\n\t\t\t\t<span><span><span>&lt;</span>configuration</span><span>></span></span>\n                    ...\n\t\t\t\t<span><span><span>&lt;/</span>configuration</span><span>></span></span>\n\t\t\t<span><span><span>&lt;/</span>execution</span><span>></span></span>\n\t\t<span><span><span>&lt;/</span>executions</span><span>></span></span>\n      <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n    <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n  <span><span><span>&lt;/</span>build</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>每个 plugin 都有些可以配置的入口， 如上面的 executions 内包含的内容。</p>\n<p>常用的插件：</p>\n<ol>\n<li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li>\n<li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li>\n<li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li>\n</ol>\n",
      "image": "https://connected2know.com/programming/wp-content/uploads/2020/06/MavenLifecycle2.png",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 多模块",
      "url": "https://www.dearxue.com/web_html_tool/maven/006_Maven_Multiple_Modules.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/006_Maven_Multiple_Modules.html",
      "content_html": "<p><a href=\"https://maven.apache.org/guides/mini/guide-multiple-modules-4.html\" target=\"_blank\" rel=\"noopener noreferrer\">多模块官方参考</a>; 带来好处：</p>\n<ol>\n<li>防止重复</li>\n<li>集中管理</li>\n</ol>\n<p><img src=\"https://maven.apache.org/guides/mini/multi-module.png\" alt=\"image\" loading=\"lazy\"></p>\n<p>Maven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的 <code>pom.xml</code>。</p>\n<p>这里有几种关系依赖： parent/child and dependency/dependent。</p>\n<p>parent 类型：  <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code> 代表他是个根目录，用来聚合，不生成包 ； 走个例子：</p>\n<div><pre><code>\nmvn archetype:generate -DgroupId<span>=</span>com.dearxue -DartifactId<span>=</span>parent-project\n\n<span>cd</span> parent-project\nmvn archetype:generate -DgroupId<span>=</span>com.dearxue -DartifactId<span>=</span>core\nmvn archetype:generate -DgroupId<span>=</span>com.dearxue -DartifactId<span>=</span>service\nmvn archetype:generate -DgroupId<span>=</span>com.dearxue -DartifactId<span>=</span>webapp\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在父目录pom.xml 添加：</p>\n<div><pre><code><span><span><span>&lt;</span>modules</span><span>></span></span>\n    <span><span><span>&lt;</span>module</span><span>></span></span>core<span><span><span>&lt;/</span>module</span><span>></span></span>\n    <span><span><span>&lt;</span>module</span><span>></span></span>service<span><span><span>&lt;/</span>module</span><span>></span></span>\n    <span><span><span>&lt;</span>module</span><span>></span></span>webapp<span><span><span>&lt;/</span>module</span><span>></span></span>\n<span><span><span>&lt;/</span>modules</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>每个子目录添加：</p>\n<div><pre><code><span><span><span>&lt;</span>parent</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>parent-project<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>groupId</span><span>></span></span>com.dearxue<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>version</span><span>></span></span>1.0-SNAPSHOT<span><span><span>&lt;/</span>version</span><span>></span></span>\n<span><span><span>&lt;/</span>parent</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>如果我们看spring boot 的启动脚本，我们可以看到： relativePath，</p>\n<div><pre><code><span><span><span>&lt;</span>parent</span><span>></span></span>\n    <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-parent<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n    <span><span><span>&lt;</span>relativePath</span><span>/></span></span><span>&lt;!-- lookup parent from repository --></span>\n<span><span><span>&lt;/</span>parent</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>\n<span>&lt;!-- \n父项目的pom.xml文件的相对路径。\n相对路径允许你选择一个不同的路径。\n默认值是../pom.xml。\nMaven首先在构建当前项目的地方寻找父项目的pom，\n其次在文件系统的这个位置（relativePath位置），\n然后在本地仓库，最后在远程仓库寻找父项目的pom。\n--></span>    \n<span><span><span>&lt;</span>relativePath</span><span>/></span></span>  \n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://maven.apache.org/guides/mini/multi-module.png",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 发布管理和镜像",
      "url": "https://www.dearxue.com/web_html_tool/maven/007_Maven_Publish.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/007_Maven_Publish.html",
      "content_html": "<h2 id=\"镜像\" tabindex=\"-1\"> 镜像</h2>\n<p><a href=\"https://developer.aliyun.com/mvn/guide\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云 Maven</a> 里面有相应的手册， 设置<strong>镜像</strong> 拉包更快点！</p>\n<div><pre><code>           slow    ┌───────────────────┐\n    ┌─────────────>│Maven Central Repo.│\n    │              └───────────────────┘\n    │                        │\n    │                        │sync\n    │                        ▼\n┌───────┐  fast    ┌───────────────────┐\n│ User  │─────────>│Maven Mirror Repo. │\n└───────┘          └───────────────────┘\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>打开 maven 的配置文件（ windows 机器一般在 maven 安装目录的 conf/settings.xml ），在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签中添加 mirror 子节点:</p>\n<div><pre><code><span><span><span>&lt;</span>mirror</span><span>></span></span>\n  <span><span><span>&lt;</span>id</span><span>></span></span>aliyunmaven<span><span><span>&lt;/</span>id</span><span>></span></span>\n  <span><span><span>&lt;</span>mirrorOf</span><span>></span></span>*<span><span><span>&lt;/</span>mirrorOf</span><span>></span></span>\n  <span><span><span>&lt;</span>name</span><span>></span></span>阿里云公共仓库<span><span><span>&lt;/</span>name</span><span>></span></span>\n  <span><span><span>&lt;</span>url</span><span>></span></span>https://maven.aliyun.com/repository/public<span><span><span>&lt;/</span>url</span><span>></span></span>\n<span><span><span>&lt;/</span>mirror</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如果想使用其它代理仓库，可在<code>&lt;repositories&gt;&lt;/repositories&gt;</code>节点中加入对应的仓库使用地址。以使用 spring 代理仓为例：</p>\n<div><pre><code><span><span><span>&lt;</span>repository</span><span>></span></span>\n  <span><span><span>&lt;</span>id</span><span>></span></span>spring<span><span><span>&lt;/</span>id</span><span>></span></span>\n  <span><span><span>&lt;</span>url</span><span>></span></span>https://maven.aliyun.com/repository/spring<span><span><span>&lt;/</span>url</span><span>></span></span>\n  <span><span><span>&lt;</span>releases</span><span>></span></span>\n    <span><span><span>&lt;</span>enabled</span><span>></span></span>true<span><span><span>&lt;/</span>enabled</span><span>></span></span>\n  <span><span><span>&lt;/</span>releases</span><span>></span></span>\n  <span><span><span>&lt;</span>snapshots</span><span>></span></span>\n    <span><span><span>&lt;</span>enabled</span><span>></span></span>true<span><span><span>&lt;/</span>enabled</span><span>></span></span>\n  <span><span><span>&lt;/</span>snapshots</span><span>></span></span>\n<span><span><span>&lt;/</span>repository</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在你的 pom.xml 文件<code>&lt;denpendencies&gt;&lt;/denpendencies&gt;</code>节点中加入你要引用的文件信息：</p>\n<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>groupId</span><span>></span></span>[GROUP_ID]<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>[ARTIFACT_ID]<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>version</span><span>></span></span>[VERSION]<span><span><span>&lt;/</span>version</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>执行拉取命令：</p>\n<div><pre><code>mvn <span>install</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>到哪里去寻觅公共的包： <a href=\"https://search.maven.org/\" target=\"_blank\" rel=\"noopener noreferrer\">maven search</a></p>\n<h2 id=\"包仓库\" tabindex=\"-1\"> 包仓库</h2>\n<ol>\n<li>传到共有的LIB库， 比如我们熟悉的 <a href=\"https://repo1.maven.org/maven2/\" target=\"_blank\" rel=\"noopener noreferrer\">maven 官方的</a></li>\n<li>自己私人的Nexus搭建的中央仓库</li>\n<li>阿里云免费</li>\n</ol>\n<h3 id=\"设置仓库凭证\" tabindex=\"-1\"> 设置仓库凭证</h3>\n<p>配置在settings.xml文件 <code>&lt;servers&gt;&lt;/servers&gt;</code> 中设置以下仓库的访问凭证，通常 <code>settings.xml</code> 在 <code>$HOME/.m2/</code> 文件目录下。</p>\n<div><pre><code><span>&lt;</span>servers<span>></span>\n  <span>&lt;</span>server<span>></span>\n    <span>&lt;</span>id<span>></span>rdc-releases<span>&lt;</span>/id<span>></span>\n    <span>&lt;</span>username<span>></span>************************<span>&lt;</span>/username<span>></span>\n    <span>&lt;</span>password<span>></span>************<span>&lt;</span>/password<span>></span>\n  <span>&lt;</span>/server<span>></span>\n  <span>&lt;</span>server<span>></span>\n    <span>&lt;</span>id<span>></span>rdc-snapshots<span>&lt;</span>/id<span>></span>\n    <span>&lt;</span>username<span>></span>************************<span>&lt;</span>/username<span>></span>\n    <span>&lt;</span>password<span>></span>************<span>&lt;</span>/password<span>></span>\n  <span>&lt;</span>/server<span>></span>\n<span>&lt;</span>/servers<span>></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"上传配置\" tabindex=\"-1\"> 上传配置</h3>\n<p><code>settings.xml</code> 文件 <code>&lt;profiles&gt;&lt;/profiles&gt;</code> 中添加以下配置。</p>\n<div><pre><code><span><span><span>&lt;</span>profiles</span><span>></span></span>\n  <span><span><span>&lt;</span>profile</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>rdc<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span><span><span>&lt;</span>properties</span><span>></span></span>\n      <span><span><span>&lt;</span>altReleaseDeploymentRepository</span><span>></span></span>\n        rdc-releases::default::https://packages.aliyun.com/maven/repository/2119365-release-7jpUqB/\n      <span><span><span>&lt;/</span>altReleaseDeploymentRepository</span><span>></span></span>\n      <span><span><span>&lt;</span>altSnapshotDeploymentRepository</span><span>></span></span>\n        rdc-snapshots::default::https://packages.aliyun.com/maven/repository/2119365-snapshot-xj0tEy/\n      <span><span><span>&lt;/</span>altSnapshotDeploymentRepository</span><span>></span></span>\n    <span><span><span>&lt;/</span>properties</span><span>></span></span>\n  <span><span><span>&lt;/</span>profile</span><span>></span></span>\n<span><span><span>&lt;/</span>profiles</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>settings.xm</code>l文件 <code>&lt;activeProfiles&gt;&lt;/activeProfiles&gt;</code> 中添加以下配置。</p>\n<div><pre><code>\n<span><span><span>&lt;</span>activeProfiles</span><span>></span></span>\n  <span><span><span>&lt;</span>activeProfile</span><span>></span></span>rdc<span><span><span>&lt;/</span>activeProfile</span><span>></span></span>\n<span><span><span>&lt;/</span>activeProfiles</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>为了您能更快速的下载公共资源的制品文件，我们建议您在 <code>settings.xml</code> 文件 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 中添加阿里云公库代理配置。</p>\n<div><pre><code><span><span><span>&lt;</span>mirrors</span><span>></span></span>\n  <span><span><span>&lt;</span>mirror</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>mirror<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span><span><span>&lt;</span>mirrorOf</span><span>></span></span>central,jcenter,!rdc-releases,!rdc-snapshots<span><span><span>&lt;/</span>mirrorOf</span><span>></span></span>\n    <span><span><span>&lt;</span>name</span><span>></span></span>mirror<span><span><span>&lt;/</span>name</span><span>></span></span>\n    <span><span><span>&lt;</span>url</span><span>></span></span>https://maven.aliyun.com/nexus/content/groups/public<span><span><span>&lt;/</span>url</span><span>></span></span>\n  <span><span><span>&lt;/</span>mirror</span><span>></span></span>\n<span><span><span>&lt;/</span>mirrors</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个是阿里云的操作， 其他操作参考 <a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1347981037010977\" target=\"_blank\" rel=\"noopener noreferrer\">发布Artifact</a>。</p>\n<p><code>Maven</code> 的设置， 涉及到maven本地环境 + 项目里面的配置 <code>Gradle</code> 将会非常简单。</p>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven Spring 插件",
      "url": "https://www.dearxue.com/web_html_tool/maven/008_Maven_Spring.html",
      "id": "https://www.dearxue.com/web_html_tool/maven/008_Maven_Spring.html",
      "content_html": "<p><a href=\"https://docs.spring.io/spring-boot/docs/2.7.0/maven-plugin/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot Maven Plugin</a>;  作为我们在spring 世界里面接触最多的插件，来了解一下！\n<a href=\"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-tools/spring-boot-maven-\" target=\"_blank\" rel=\"noopener noreferrer\">Spring-boot-maven-plugin</a> 源码。</p>\n<h2 id=\"plugin\" tabindex=\"-1\"> Plugin</h2>\n<p><strong>spring-boot-maven-plugin</strong>  具体如何开发maven 插件这里不再赘述， plugin 带来的好处</p>\n<ol>\n<li>spring-boot:build-image</li>\n<li>spring-boot:build-info</li>\n<li>spring-boot:help</li>\n<li>spring-boot:repackage</li>\n<li>spring-boot:run   启动一个进程</li>\n<li>spring-boot:start 启动一个进程， 集成测试时候使用，测试前启动，测试后结束</li>\n<li>spring-boot:stop  和start 对应， 当测试结束后停掉</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>project</span><span>></span></span>\n    <span><span><span>&lt;</span>modelVersion</span><span>></span></span>4.0.0<span><span><span>&lt;/</span>modelVersion</span><span>></span></span>\n    <span><span><span>&lt;</span>artifactId</span><span>></span></span>getting-started<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n    <span>&lt;!-- ... --></span>\n    <span><span><span>&lt;</span>build</span><span>></span></span>\n        <span><span><span>&lt;</span>plugins</span><span>></span></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n    <span><span><span>&lt;/</span>build</span><span>></span></span>\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 <a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Start</a> 尝试生成一个项目，然后预览下 pom.xml</p>\n<p><a href=\"https://start.spring.io/#!type=maven-project&amp;language=java&amp;platformVersion=2.7.0&amp;packaging=jar&amp;jvmVersion=1.8&amp;groupId=com.dearxue.spring.boot&amp;artifactId=learn&amp;name=learn&amp;description=learn%20from%20dearxue%20of%20spring%20boot%20section&amp;packageName=com.dearxue.spring.boot.learn&amp;dependencies=web\" target=\"_blank\" rel=\"noopener noreferrer\">start.spring.io 例子</a>  plugin 后还需要 pom 文件的引入：</p>\n<div><pre><code>\n<span>&lt;!-- Inherit defaults from Spring Boot --></span>\n<span><span><span>&lt;</span>parent</span><span>></span></span>\n  <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-starter-parent<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n<span><span><span>&lt;/</span>parent</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>Parent POM 引入有限制， 所以可以用另外一种方式：</p>\n<div><pre><code><span><span><span>&lt;</span>dependencyManagement</span><span>></span></span>\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span>&lt;!-- Import dependency management from Spring Boot --></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-dependencies<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n            <span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n            <span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n<span><span><span>&lt;/</span>dependencyManagement</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>DependencyManagement 可以导入多个， 你可以导入spring 的 POM 也可以导入你们公司自己的POM.</p>\n<p>Parent vs Dependency 在覆盖 <a href=\"https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#appendix.dependency-versions\" target=\"_blank\" rel=\"noopener noreferrer\">默认版本</a> 的时候可能不一样， spring boot 每个版本的默认第三方版本：</p>\n<p><strong>Parent</strong> 通过覆盖properties :</p>\n<div><pre><code><span><span><span>&lt;</span>properties</span><span>></span></span>\n    <span><span><span>&lt;</span>slf4j.version</span><span>></span></span>1.7.30<span><span><span>&lt;/</span>slf4j.version</span><span>></span></span>\n    <span><span><span>&lt;</span>spring-data-releasetrain.version</span><span>></span></span>Moore-SR6<span><span><span>&lt;/</span>spring-data-releasetrain.version</span><span>></span></span>\n<span><span><span>&lt;/</span>properties</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p><strong>Depedency</strong> 通过在 dependencyManagement 前面添加你的配置：</p>\n<div><pre><code><span><span><span>&lt;</span>dependencyManagement</span><span>></span></span>\n    <span><span><span>&lt;</span>dependencies</span><span>></span></span>\n        <span>&lt;!-- Override SLF4J provided by Spring Boot --></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.slf4j<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>slf4j-api<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;</span>version</span><span>></span></span>1.7.30<span><span><span>&lt;/</span>version</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n        <span>&lt;!-- Override Spring Data release train provided by Spring Boot --></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.data<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-data-releasetrain<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;</span>version</span><span>></span></span>2020.0.0-SR1<span><span><span>&lt;/</span>version</span><span>></span></span>\n            <span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n            <span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n        <span><span><span>&lt;</span>dependency</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-dependencies<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;</span>version</span><span>></span></span>2.7.0<span><span><span>&lt;/</span>version</span><span>></span></span>\n            <span><span><span>&lt;</span>type</span><span>></span></span>pom<span><span><span>&lt;/</span>type</span><span>></span></span>\n            <span><span><span>&lt;</span>scope</span><span>></span></span>import<span><span><span>&lt;/</span>scope</span><span>></span></span>\n        <span><span><span>&lt;/</span>dependency</span><span>></span></span>\n    <span><span><span>&lt;/</span>dependencies</span><span>></span></span>\n<span><span><span>&lt;/</span>dependencyManagement</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"容器\" tabindex=\"-1\"> 容器</h2>\n<h3 id=\"oci-开放容器标准\" tabindex=\"-1\"> OCI 开放容器标准</h3>\n<p>Spring Boot 插件本身带任务可以从jar/war 创建镜像 <a href=\"https://github.com/opencontainers/image-spec\" target=\"_blank\" rel=\"noopener noreferrer\">OCI image</a> 通过 <a href=\"https://buildpacks.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Cloud Native Buildpacks</a> (CNB). 也就是 build-image 这个任务。</p>\n<div><pre><code><span><span><span>&lt;</span>build</span><span>></span></span>\n    <span><span><span>&lt;</span>plugins</span><span>></span></span>\n        <span><span><span>&lt;</span>plugin</span><span>></span></span>\n            <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n            <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n            <span><span><span>&lt;</span>executions</span><span>></span></span>\n                <span><span><span>&lt;</span>execution</span><span>></span></span>\n                    <span><span><span>&lt;</span>goals</span><span>></span></span>\n                        <span><span><span>&lt;</span>goal</span><span>></span></span>build-image<span><span><span>&lt;/</span>goal</span><span>></span></span>\n                    <span><span><span>&lt;/</span>goals</span><span>></span></span>\n                <span><span><span>&lt;/</span>execution</span><span>></span></span>\n            <span><span><span>&lt;/</span>executions</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n    <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n<span><span><span>&lt;/</span>build</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>mvn spring-boot:build-image</code>  命令将在package 后自动创建 image</p>\n<ol>\n<li>本地docker 进程</li>\n<li>推送docker 仓库</li>\n<li>定制化</li>\n</ol>\n<div><pre><code><span><span><span>&lt;</span>project</span><span>></span></span>\n    <span><span><span>&lt;</span>build</span><span>></span></span>\n        <span><span><span>&lt;</span>plugins</span><span>></span></span>\n            <span><span><span>&lt;</span>plugin</span><span>></span></span>\n                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n                <span><span><span>&lt;</span>configuration</span><span>></span></span>\n                    <span><span><span>&lt;</span>image</span><span>></span></span>\n                        <span><span><span>&lt;</span>builder</span><span>></span></span>mine/java-cnb-builder<span><span><span>&lt;/</span>builder</span><span>></span></span>\n                        <span><span><span>&lt;</span>runImage</span><span>></span></span>mine/java-cnb-run<span><span><span>&lt;/</span>runImage</span><span>></span></span>\n                    <span><span><span>&lt;/</span>image</span><span>></span></span>\n                <span><span><span>&lt;/</span>configuration</span><span>></span></span>\n            <span><span><span>&lt;/</span>plugin</span><span>></span></span>\n        <span><span><span>&lt;/</span>plugins</span><span>></span></span>\n    <span><span><span>&lt;/</span>build</span><span>></span></span>\n<span><span><span>&lt;/</span>project</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"用-mvn-跑spring\" tabindex=\"-1\"> 用 mvn 跑spring</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#run\" target=\"_blank\" rel=\"noopener noreferrer\">参考文档</a> ; 可以定制各种参数。</p>\n<div><pre><code><span>$mvn</span> spring-boot:run\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ol>\n<li>定制系统参数</li>\n<li>配置参数</li>\n<li>环境参数</li>\n<li>应用程序参数</li>\n<li>profile 参数</li>\n</ol>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Maven"
      ]
    },
    {
      "title": "Maven 构建工具",
      "url": "https://www.dearxue.com/web_html_tool/maven/",
      "id": "https://www.dearxue.com/web_html_tool/maven/",
      "content_html": "<p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具</p>\n<p>Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。</p>\n",
      "date_published": "2022-06-16T13:00:17.000Z",
      "date_modified": "2022-06-16T13:00:17.000Z",
      "authors": [],
      "tags": [
        "Guide"
      ]
    }
  ]
}